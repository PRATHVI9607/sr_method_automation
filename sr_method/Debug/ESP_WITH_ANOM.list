
ESP_WITH_ANOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008514  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080086a4  080086a4  000096a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008778  08008778  0000a0bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008780  08008780  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008780  08008780  00009780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008784  08008784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008788  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         0000005c  20000060  080087e8  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  0000a0bc  2**0
                  CONTENTS
 11 .bss          00000bc0  200000bc  200000bc  0000a0bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000c7c  20000c7c  0000a0bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012080  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ca0  00000000  00000000  0001c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  0001ee10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bcb  00000000  00000000  0001fd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022821  00000000  00000000  00020933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001488b  00000000  00000000  00043154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c915b  00000000  00000000  000579df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000087  00000000  00000000  00120b3a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004720  00000000  00000000  00120bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001252e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800868c 	.word	0x0800868c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	0800868c 	.word	0x0800868c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_d2f>:
 8000708:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800070c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000710:	bf24      	itt	cs
 8000712:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000716:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800071a:	d90d      	bls.n	8000738 <__aeabi_d2f+0x30>
 800071c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000720:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000724:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000728:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800072c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000730:	bf08      	it	eq
 8000732:	f020 0001 	biceq.w	r0, r0, #1
 8000736:	4770      	bx	lr
 8000738:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800073c:	d121      	bne.n	8000782 <__aeabi_d2f+0x7a>
 800073e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000742:	bfbc      	itt	lt
 8000744:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000748:	4770      	bxlt	lr
 800074a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800074e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000752:	f1c2 0218 	rsb	r2, r2, #24
 8000756:	f1c2 0c20 	rsb	ip, r2, #32
 800075a:	fa10 f30c 	lsls.w	r3, r0, ip
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	bf18      	it	ne
 8000764:	f040 0001 	orrne.w	r0, r0, #1
 8000768:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800076c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000770:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000774:	ea40 000c 	orr.w	r0, r0, ip
 8000778:	fa23 f302 	lsr.w	r3, r3, r2
 800077c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000780:	e7cc      	b.n	800071c <__aeabi_d2f+0x14>
 8000782:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000786:	d107      	bne.n	8000798 <__aeabi_d2f+0x90>
 8000788:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800078c:	bf1e      	ittt	ne
 800078e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000792:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000796:	4770      	bxne	lr
 8000798:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800079c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_uldivmod>:
 80007a8:	b953      	cbnz	r3, 80007c0 <__aeabi_uldivmod+0x18>
 80007aa:	b94a      	cbnz	r2, 80007c0 <__aeabi_uldivmod+0x18>
 80007ac:	2900      	cmp	r1, #0
 80007ae:	bf08      	it	eq
 80007b0:	2800      	cmpeq	r0, #0
 80007b2:	bf1c      	itt	ne
 80007b4:	f04f 31ff 	movne.w	r1, #4294967295
 80007b8:	f04f 30ff 	movne.w	r0, #4294967295
 80007bc:	f000 b988 	b.w	8000ad0 <__aeabi_idiv0>
 80007c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007c8:	f000 f806 	bl	80007d8 <__udivmoddi4>
 80007cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d4:	b004      	add	sp, #16
 80007d6:	4770      	bx	lr

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	468e      	mov	lr, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	4688      	mov	r8, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4617      	mov	r7, r2
 80007ec:	d962      	bls.n	80008b4 <__udivmoddi4+0xdc>
 80007ee:	fab2 f682 	clz	r6, r2
 80007f2:	b14e      	cbz	r6, 8000808 <__udivmoddi4+0x30>
 80007f4:	f1c6 0320 	rsb	r3, r6, #32
 80007f8:	fa01 f806 	lsl.w	r8, r1, r6
 80007fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000800:	40b7      	lsls	r7, r6
 8000802:	ea43 0808 	orr.w	r8, r3, r8
 8000806:	40b4      	lsls	r4, r6
 8000808:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800080c:	fa1f fc87 	uxth.w	ip, r7
 8000810:	fbb8 f1fe 	udiv	r1, r8, lr
 8000814:	0c23      	lsrs	r3, r4, #16
 8000816:	fb0e 8811 	mls	r8, lr, r1, r8
 800081a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800081e:	fb01 f20c 	mul.w	r2, r1, ip
 8000822:	429a      	cmp	r2, r3
 8000824:	d909      	bls.n	800083a <__udivmoddi4+0x62>
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	f101 30ff 	add.w	r0, r1, #4294967295
 800082c:	f080 80ea 	bcs.w	8000a04 <__udivmoddi4+0x22c>
 8000830:	429a      	cmp	r2, r3
 8000832:	f240 80e7 	bls.w	8000a04 <__udivmoddi4+0x22c>
 8000836:	3902      	subs	r1, #2
 8000838:	443b      	add	r3, r7
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	b2a3      	uxth	r3, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800084a:	fb00 fc0c 	mul.w	ip, r0, ip
 800084e:	459c      	cmp	ip, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x8e>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f100 32ff 	add.w	r2, r0, #4294967295
 8000858:	f080 80d6 	bcs.w	8000a08 <__udivmoddi4+0x230>
 800085c:	459c      	cmp	ip, r3
 800085e:	f240 80d3 	bls.w	8000a08 <__udivmoddi4+0x230>
 8000862:	443b      	add	r3, r7
 8000864:	3802      	subs	r0, #2
 8000866:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086a:	eba3 030c 	sub.w	r3, r3, ip
 800086e:	2100      	movs	r1, #0
 8000870:	b11d      	cbz	r5, 800087a <__udivmoddi4+0xa2>
 8000872:	40f3      	lsrs	r3, r6
 8000874:	2200      	movs	r2, #0
 8000876:	e9c5 3200 	strd	r3, r2, [r5]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d905      	bls.n	800088e <__udivmoddi4+0xb6>
 8000882:	b10d      	cbz	r5, 8000888 <__udivmoddi4+0xb0>
 8000884:	e9c5 0100 	strd	r0, r1, [r5]
 8000888:	2100      	movs	r1, #0
 800088a:	4608      	mov	r0, r1
 800088c:	e7f5      	b.n	800087a <__udivmoddi4+0xa2>
 800088e:	fab3 f183 	clz	r1, r3
 8000892:	2900      	cmp	r1, #0
 8000894:	d146      	bne.n	8000924 <__udivmoddi4+0x14c>
 8000896:	4573      	cmp	r3, lr
 8000898:	d302      	bcc.n	80008a0 <__udivmoddi4+0xc8>
 800089a:	4282      	cmp	r2, r0
 800089c:	f200 8105 	bhi.w	8000aaa <__udivmoddi4+0x2d2>
 80008a0:	1a84      	subs	r4, r0, r2
 80008a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	4690      	mov	r8, r2
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d0e5      	beq.n	800087a <__udivmoddi4+0xa2>
 80008ae:	e9c5 4800 	strd	r4, r8, [r5]
 80008b2:	e7e2      	b.n	800087a <__udivmoddi4+0xa2>
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	f000 8090 	beq.w	80009da <__udivmoddi4+0x202>
 80008ba:	fab2 f682 	clz	r6, r2
 80008be:	2e00      	cmp	r6, #0
 80008c0:	f040 80a4 	bne.w	8000a0c <__udivmoddi4+0x234>
 80008c4:	1a8a      	subs	r2, r1, r2
 80008c6:	0c03      	lsrs	r3, r0, #16
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	b280      	uxth	r0, r0
 80008ce:	b2bc      	uxth	r4, r7
 80008d0:	2101      	movs	r1, #1
 80008d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008de:	fb04 f20c 	mul.w	r2, r4, ip
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d907      	bls.n	80008f6 <__udivmoddi4+0x11e>
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008ec:	d202      	bcs.n	80008f4 <__udivmoddi4+0x11c>
 80008ee:	429a      	cmp	r2, r3
 80008f0:	f200 80e0 	bhi.w	8000ab4 <__udivmoddi4+0x2dc>
 80008f4:	46c4      	mov	ip, r8
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000900:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000904:	fb02 f404 	mul.w	r4, r2, r4
 8000908:	429c      	cmp	r4, r3
 800090a:	d907      	bls.n	800091c <__udivmoddi4+0x144>
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x142>
 8000914:	429c      	cmp	r4, r3
 8000916:	f200 80ca 	bhi.w	8000aae <__udivmoddi4+0x2d6>
 800091a:	4602      	mov	r2, r0
 800091c:	1b1b      	subs	r3, r3, r4
 800091e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000922:	e7a5      	b.n	8000870 <__udivmoddi4+0x98>
 8000924:	f1c1 0620 	rsb	r6, r1, #32
 8000928:	408b      	lsls	r3, r1
 800092a:	fa22 f706 	lsr.w	r7, r2, r6
 800092e:	431f      	orrs	r7, r3
 8000930:	fa0e f401 	lsl.w	r4, lr, r1
 8000934:	fa20 f306 	lsr.w	r3, r0, r6
 8000938:	fa2e fe06 	lsr.w	lr, lr, r6
 800093c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000940:	4323      	orrs	r3, r4
 8000942:	fa00 f801 	lsl.w	r8, r0, r1
 8000946:	fa1f fc87 	uxth.w	ip, r7
 800094a:	fbbe f0f9 	udiv	r0, lr, r9
 800094e:	0c1c      	lsrs	r4, r3, #16
 8000950:	fb09 ee10 	mls	lr, r9, r0, lr
 8000954:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000958:	fb00 fe0c 	mul.w	lr, r0, ip
 800095c:	45a6      	cmp	lr, r4
 800095e:	fa02 f201 	lsl.w	r2, r2, r1
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x1a0>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 3aff 	add.w	sl, r0, #4294967295
 800096a:	f080 809c 	bcs.w	8000aa6 <__udivmoddi4+0x2ce>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8099 	bls.w	8000aa6 <__udivmoddi4+0x2ce>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	eba4 040e 	sub.w	r4, r4, lr
 800097c:	fa1f fe83 	uxth.w	lr, r3
 8000980:	fbb4 f3f9 	udiv	r3, r4, r9
 8000984:	fb09 4413 	mls	r4, r9, r3, r4
 8000988:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800098c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000990:	45a4      	cmp	ip, r4
 8000992:	d908      	bls.n	80009a6 <__udivmoddi4+0x1ce>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f103 3eff 	add.w	lr, r3, #4294967295
 800099a:	f080 8082 	bcs.w	8000aa2 <__udivmoddi4+0x2ca>
 800099e:	45a4      	cmp	ip, r4
 80009a0:	d97f      	bls.n	8000aa2 <__udivmoddi4+0x2ca>
 80009a2:	3b02      	subs	r3, #2
 80009a4:	443c      	add	r4, r7
 80009a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009aa:	eba4 040c 	sub.w	r4, r4, ip
 80009ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80009b2:	4564      	cmp	r4, ip
 80009b4:	4673      	mov	r3, lr
 80009b6:	46e1      	mov	r9, ip
 80009b8:	d362      	bcc.n	8000a80 <__udivmoddi4+0x2a8>
 80009ba:	d05f      	beq.n	8000a7c <__udivmoddi4+0x2a4>
 80009bc:	b15d      	cbz	r5, 80009d6 <__udivmoddi4+0x1fe>
 80009be:	ebb8 0203 	subs.w	r2, r8, r3
 80009c2:	eb64 0409 	sbc.w	r4, r4, r9
 80009c6:	fa04 f606 	lsl.w	r6, r4, r6
 80009ca:	fa22 f301 	lsr.w	r3, r2, r1
 80009ce:	431e      	orrs	r6, r3
 80009d0:	40cc      	lsrs	r4, r1
 80009d2:	e9c5 6400 	strd	r6, r4, [r5]
 80009d6:	2100      	movs	r1, #0
 80009d8:	e74f      	b.n	800087a <__udivmoddi4+0xa2>
 80009da:	fbb1 fcf2 	udiv	ip, r1, r2
 80009de:	0c01      	lsrs	r1, r0, #16
 80009e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009e4:	b280      	uxth	r0, r0
 80009e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ea:	463b      	mov	r3, r7
 80009ec:	4638      	mov	r0, r7
 80009ee:	463c      	mov	r4, r7
 80009f0:	46b8      	mov	r8, r7
 80009f2:	46be      	mov	lr, r7
 80009f4:	2620      	movs	r6, #32
 80009f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009fa:	eba2 0208 	sub.w	r2, r2, r8
 80009fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a02:	e766      	b.n	80008d2 <__udivmoddi4+0xfa>
 8000a04:	4601      	mov	r1, r0
 8000a06:	e718      	b.n	800083a <__udivmoddi4+0x62>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	e72c      	b.n	8000866 <__udivmoddi4+0x8e>
 8000a0c:	f1c6 0220 	rsb	r2, r6, #32
 8000a10:	fa2e f302 	lsr.w	r3, lr, r2
 8000a14:	40b7      	lsls	r7, r6
 8000a16:	40b1      	lsls	r1, r6
 8000a18:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a20:	430a      	orrs	r2, r1
 8000a22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a26:	b2bc      	uxth	r4, r7
 8000a28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a32:	fb08 f904 	mul.w	r9, r8, r4
 8000a36:	40b0      	lsls	r0, r6
 8000a38:	4589      	cmp	r9, r1
 8000a3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a3e:	b280      	uxth	r0, r0
 8000a40:	d93e      	bls.n	8000ac0 <__udivmoddi4+0x2e8>
 8000a42:	1879      	adds	r1, r7, r1
 8000a44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a48:	d201      	bcs.n	8000a4e <__udivmoddi4+0x276>
 8000a4a:	4589      	cmp	r9, r1
 8000a4c:	d81f      	bhi.n	8000a8e <__udivmoddi4+0x2b6>
 8000a4e:	eba1 0109 	sub.w	r1, r1, r9
 8000a52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a56:	fb09 f804 	mul.w	r8, r9, r4
 8000a5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a5e:	b292      	uxth	r2, r2
 8000a60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a64:	4542      	cmp	r2, r8
 8000a66:	d229      	bcs.n	8000abc <__udivmoddi4+0x2e4>
 8000a68:	18ba      	adds	r2, r7, r2
 8000a6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a6e:	d2c4      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a70:	4542      	cmp	r2, r8
 8000a72:	d2c2      	bcs.n	80009fa <__udivmoddi4+0x222>
 8000a74:	f1a9 0102 	sub.w	r1, r9, #2
 8000a78:	443a      	add	r2, r7
 8000a7a:	e7be      	b.n	80009fa <__udivmoddi4+0x222>
 8000a7c:	45f0      	cmp	r8, lr
 8000a7e:	d29d      	bcs.n	80009bc <__udivmoddi4+0x1e4>
 8000a80:	ebbe 0302 	subs.w	r3, lr, r2
 8000a84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a88:	3801      	subs	r0, #1
 8000a8a:	46e1      	mov	r9, ip
 8000a8c:	e796      	b.n	80009bc <__udivmoddi4+0x1e4>
 8000a8e:	eba7 0909 	sub.w	r9, r7, r9
 8000a92:	4449      	add	r1, r9
 8000a94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9c:	fb09 f804 	mul.w	r8, r9, r4
 8000aa0:	e7db      	b.n	8000a5a <__udivmoddi4+0x282>
 8000aa2:	4673      	mov	r3, lr
 8000aa4:	e77f      	b.n	80009a6 <__udivmoddi4+0x1ce>
 8000aa6:	4650      	mov	r0, sl
 8000aa8:	e766      	b.n	8000978 <__udivmoddi4+0x1a0>
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e6fd      	b.n	80008aa <__udivmoddi4+0xd2>
 8000aae:	443b      	add	r3, r7
 8000ab0:	3a02      	subs	r2, #2
 8000ab2:	e733      	b.n	800091c <__udivmoddi4+0x144>
 8000ab4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ab8:	443b      	add	r3, r7
 8000aba:	e71c      	b.n	80008f6 <__udivmoddi4+0x11e>
 8000abc:	4649      	mov	r1, r9
 8000abe:	e79c      	b.n	80009fa <__udivmoddi4+0x222>
 8000ac0:	eba1 0109 	sub.w	r1, r1, r9
 8000ac4:	46c4      	mov	ip, r8
 8000ac6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aca:	fb09 f804 	mul.w	r8, r9, r4
 8000ace:	e7c4      	b.n	8000a5a <__udivmoddi4+0x282>

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_GPIO_Init+0x68>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <MX_I2C1_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <MX_I2C1_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_I2C1_Init+0x50>)
 8000b7e:	f000 fe6b 	bl	8001858 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 fa02 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000d8 	.word	0x200000d8
 8000b94:	40005400 	.word	0x40005400
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	@ 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23c0      	movs	r3, #192	@ 0xc0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bf6:	f000 fc93 	bl	8001520 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	@ 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400

08000c2c <uart_printf>:
HAL_StatusTypeDef Read_ADXL345(vector3_t *accel);
void fill_accelerometer_buffer(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void uart_printf(const char *fmt, ...) {
 8000c2c:	b40f      	push	{r0, r1, r2, r3}
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b0a2      	sub	sp, #136	@ 0x88
 8000c32:	af00      	add	r7, sp, #0
    char buffer[128];
    va_list args;
    va_start(args, fmt);
 8000c34:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c38:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000c3a:	f107 0008 	add.w	r0, r7, #8
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	f007 f80d 	bl	8007c64 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fabe 	bl	80001d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f107 0108 	add.w	r1, r7, #8
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c60:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <uart_printf+0x50>)
 8000c62:	f003 fb59 	bl	8004318 <HAL_UART_Transmit>
    HAL_Delay(5);
 8000c66:	2005      	movs	r0, #5
 8000c68:	f000 fb50 	bl	800130c <HAL_Delay>
}
 8000c6c:	bf00      	nop
 8000c6e:	3788      	adds	r7, #136	@ 0x88
 8000c70:	46bd      	mov	sp, r7
 8000c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c76:	b004      	add	sp, #16
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200005e0 	.word	0x200005e0

08000c80 <Read_ADXL345>:

HAL_StatusTypeDef Read_ADXL345(vector3_t *accel) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, ADXL345_REG_DATA_X0, 1, buf, 6, 100) != HAL_OK)
 8000c88:	2364      	movs	r3, #100	@ 0x64
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	2232      	movs	r2, #50	@ 0x32
 8000c9a:	21a6      	movs	r1, #166	@ 0xa6
 8000c9c:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <Read_ADXL345+0x74>)
 8000c9e:	f001 f819 	bl	8001cd4 <HAL_I2C_Mem_Read>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <Read_ADXL345+0x2c>
        return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e01e      	b.n	8000cea <Read_ADXL345+0x6a>

    accel->x = (int16_t)((buf[1] << 8) | buf[0]);
 8000cac:	7a7b      	ldrb	r3, [r7, #9]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	7a3b      	ldrb	r3, [r7, #8]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	801a      	strh	r2, [r3, #0]
    accel->y = (int16_t)((buf[3] << 8) | buf[2]);
 8000cc0:	7afb      	ldrb	r3, [r7, #11]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	7abb      	ldrb	r3, [r7, #10]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	805a      	strh	r2, [r3, #2]
    accel->z = (int16_t)((buf[5] << 8) | buf[4]);
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21a      	sxth	r2, r3
 8000cdc:	7b3b      	ldrb	r3, [r7, #12]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	809a      	strh	r2, [r3, #4]

    return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000d8 	.word	0x200000d8

08000cf8 <fill_accelerometer_buffer>:

void fill_accelerometer_buffer(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
    vector3_t acc;
    for (int i = 0; i < ACC_BUFFER_SIZE / 3; i++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e048      	b.n	8000d96 <fill_accelerometer_buffer+0x9e>
        while (Read_ADXL345(&acc) != HAL_OK);
 8000d04:	bf00      	nop
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffb9 	bl	8000c80 <Read_ADXL345>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f8      	bne.n	8000d06 <fill_accelerometer_buffer+0xe>
        acc_buffer[i * 3 + 0] = acc.x * 0.0039f;
 8000d14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000da8 <fill_accelerometer_buffer+0xb0>
 8000d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d30:	4a1e      	ldr	r2, [pc, #120]	@ (8000dac <fill_accelerometer_buffer+0xb4>)
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	edc3 7a00 	vstr	s15, [r3]
        acc_buffer[i * 3 + 1] = acc.y * 0.0039f;
 8000d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3301      	adds	r3, #1
 8000d50:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8000da8 <fill_accelerometer_buffer+0xb0>
 8000d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d58:	4a14      	ldr	r2, [pc, #80]	@ (8000dac <fill_accelerometer_buffer+0xb4>)
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	edc3 7a00 	vstr	s15, [r3]
        acc_buffer[i * 3 + 2] = acc.z * 0.0039f;
 8000d62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	3302      	adds	r3, #2
 8000d78:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8000da8 <fill_accelerometer_buffer+0xb0>
 8000d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d80:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <fill_accelerometer_buffer+0xb4>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	edc3 7a00 	vstr	s15, [r3]
        HAL_Delay(1);  // 1kHz sampling
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fabe 	bl	800130c <HAL_Delay>
    for (int i = 0; i < ACC_BUFFER_SIZE / 3; i++) {
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b63      	cmp	r3, #99	@ 0x63
 8000d9a:	ddb3      	ble.n	8000d04 <fill_accelerometer_buffer+0xc>
    }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	3b7f9724 	.word	0x3b7f9724
 8000dac:	2000012c 	.word	0x2000012c

08000db0 <main>:
/* USER CODE END 0 */

int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af04      	add	r7, sp, #16
  HAL_Init();
 8000db6:	f000 fa37 	bl	8001228 <HAL_Init>
  SystemClock_Config();
 8000dba:	f000 f881 	bl	8000ec0 <SystemClock_Config>

  MX_GPIO_Init();
 8000dbe:	f7ff fe89 	bl	8000ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dc2:	f7ff febd 	bl	8000b40 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000dc6:	f000 f993 	bl	80010f0 <MX_USART2_UART_Init>

  HAL_Delay(500);
 8000dca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dce:	f000 fa9d 	bl	800130c <HAL_Delay>
  uart_printf("STM32 UART Ready\r\n");
 8000dd2:	4831      	ldr	r0, [pc, #196]	@ (8000e98 <main+0xe8>)
 8000dd4:	f7ff ff2a 	bl	8000c2c <uart_printf>

  /* === ADXL345 INIT === */
  uint8_t cmd;
  cmd = 0x08; // Measure mode
 8000dd8:	2308      	movs	r3, #8
 8000dda:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, ADXL345_REG_POWER_CTL, 1, &cmd, 1, 100);
 8000ddc:	2364      	movs	r3, #100	@ 0x64
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	222d      	movs	r2, #45	@ 0x2d
 8000dec:	21a6      	movs	r1, #166	@ 0xa6
 8000dee:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <main+0xec>)
 8000df0:	f000 fe76 	bl	8001ae0 <HAL_I2C_Mem_Write>
  cmd = 0x08; // ±2g full resolution
 8000df4:	2308      	movs	r3, #8
 8000df6:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, ADXL345_REG_DATA_FORMAT, 1, &cmd, 1, 100);
 8000df8:	2364      	movs	r3, #100	@ 0x64
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2231      	movs	r2, #49	@ 0x31
 8000e08:	21a6      	movs	r1, #166	@ 0xa6
 8000e0a:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <main+0xec>)
 8000e0c:	f000 fe68 	bl	8001ae0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8000e10:	2064      	movs	r0, #100	@ 0x64
 8000e12:	f000 fa7b 	bl	800130c <HAL_Delay>

  /* === NanoEdge AI Initialization === */
  enum neai_state error_code = neai_anomalydetection_init();
 8000e16:	f006 fe87 	bl	8007b28 <neai_anomalydetection_init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	717b      	strb	r3, [r7, #5]
  uart_printf("NanoEdgeAI init: %s\r\n", error_code == NEAI_OK ? "OK" : "ERROR");
 8000e1e:	797b      	ldrb	r3, [r7, #5]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <main+0x78>
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <main+0xf0>)
 8000e26:	e000      	b.n	8000e2a <main+0x7a>
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <main+0xf4>)
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481e      	ldr	r0, [pc, #120]	@ (8000ea8 <main+0xf8>)
 8000e2e:	f7ff fefd 	bl	8000c2c <uart_printf>

  /* === Learning Phase === */
  for (uint16_t i = 0; i < 20; i++) {
 8000e32:	2300      	movs	r3, #0
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	e00d      	b.n	8000e54 <main+0xa4>
    uart_printf("Learning iteration %d/20\r\n", i + 1);
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481b      	ldr	r0, [pc, #108]	@ (8000eac <main+0xfc>)
 8000e40:	f7ff fef4 	bl	8000c2c <uart_printf>
    fill_accelerometer_buffer();
 8000e44:	f7ff ff58 	bl	8000cf8 <fill_accelerometer_buffer>
    neai_anomalydetection_learn(acc_buffer);
 8000e48:	4819      	ldr	r0, [pc, #100]	@ (8000eb0 <main+0x100>)
 8000e4a:	f006 f995 	bl	8007178 <neai_anomalydetection_learn>
  for (uint16_t i = 0; i < 20; i++) {
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	3301      	adds	r3, #1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	2b13      	cmp	r3, #19
 8000e58:	d9ee      	bls.n	8000e38 <main+0x88>
  }

  uart_printf("Learning finished\r\n");
 8000e5a:	4816      	ldr	r0, [pc, #88]	@ (8000eb4 <main+0x104>)
 8000e5c:	f7ff fee6 	bl	8000c2c <uart_printf>

  /* === Inference Phase === */
  uint8_t similarity = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	70fb      	strb	r3, [r7, #3]

  while (1)
  {
    fill_accelerometer_buffer();
 8000e64:	f7ff ff48 	bl	8000cf8 <fill_accelerometer_buffer>
    neai_anomalydetection_detect(acc_buffer, &similarity);
 8000e68:	1cfb      	adds	r3, r7, #3
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <main+0x100>)
 8000e6e:	f006 fc6b 	bl	8007748 <neai_anomalydetection_detect>

    if (similarity >= 90) {
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	2b59      	cmp	r3, #89	@ 0x59
 8000e76:	d905      	bls.n	8000e84 <main+0xd4>
        uart_printf("NOMINAL,%d\r\n", similarity);
 8000e78:	78fb      	ldrb	r3, [r7, #3]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480e      	ldr	r0, [pc, #56]	@ (8000eb8 <main+0x108>)
 8000e7e:	f7ff fed5 	bl	8000c2c <uart_printf>
 8000e82:	e004      	b.n	8000e8e <main+0xde>
    } else {
        uart_printf("ANOMALY,%d\r\n", similarity);
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	4619      	mov	r1, r3
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <main+0x10c>)
 8000e8a:	f7ff fecf 	bl	8000c2c <uart_printf>
    }

    HAL_Delay(500);
 8000e8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e92:	f000 fa3b 	bl	800130c <HAL_Delay>
    fill_accelerometer_buffer();
 8000e96:	e7e5      	b.n	8000e64 <main+0xb4>
 8000e98:	080086a4 	.word	0x080086a4
 8000e9c:	200000d8 	.word	0x200000d8
 8000ea0:	080086b8 	.word	0x080086b8
 8000ea4:	080086bc 	.word	0x080086bc
 8000ea8:	080086c4 	.word	0x080086c4
 8000eac:	080086dc 	.word	0x080086dc
 8000eb0:	2000012c 	.word	0x2000012c
 8000eb4:	080086f8 	.word	0x080086f8
 8000eb8:	0800870c 	.word	0x0800870c
 8000ebc:	0800871c 	.word	0x0800871c

08000ec0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	@ 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	@ 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 fed6 	bl	8007c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <SystemClock_Config+0xc8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <SystemClock_Config+0xcc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f34:	2348      	movs	r3, #72	@ 0x48
 8000f36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fcff 	bl	8003948 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x94>
    Error_Handler();
 8000f50:	f000 f81e 	bl	8000f90 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000f54:	230f      	movs	r3, #15
 8000f56:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2102      	movs	r1, #2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 ff61 	bl	8003e38 <HAL_RCC_ClockConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0xc0>
    Error_Handler();
 8000f7c:	f000 f808 	bl	8000f90 <Error_Handler>
}
 8000f80:	bf00      	nop
 8000f82:	3750      	adds	r7, #80	@ 0x50
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40007000 	.word	0x40007000

08000f90 <Error_Handler>:

void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  __disable_irq();
  while (1) {}
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <Error_Handler+0x8>

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a08      	ldr	r2, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fa6c 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <MemManage_Handler+0x4>

08001004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <UsageFault_Handler+0x4>

08001014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001042:	f000 f943 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <OTG_FS_IRQHandler+0x10>)
 8001052:	f001 fc25 	bl	80028a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000630 	.word	0x20000630

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f006 fdfe 	bl	8007c90 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20020000 	.word	0x20020000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	200005dc 	.word	0x200005dc
 80010c8:	20000c80 	.word	0x20000c80

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <MX_USART2_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 80010fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001116:	2208      	movs	r2, #8
 8001118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_USART2_UART_Init+0x4c>)
 8001128:	f003 f8a6 	bl	8004278 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f7ff ff2d 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200005e0 	.word	0x200005e0
 8001140:	40004400 	.word	0x40004400

08001144 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <HAL_UART_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12b      	bne.n	80011be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_UART_MspInit+0x88>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_UART_MspInit+0x88>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_UART_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800119e:	230c      	movs	r3, #12
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011ae:	2307      	movs	r3, #7
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <HAL_UART_MspInit+0x8c>)
 80011ba:	f000 f9b1 	bl	8001520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40004400 	.word	0x40004400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d8:	f7ff ff78 	bl	80010cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f006 fd4b 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fdd3 	bl	8000db0 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001218:	08008788 	.word	0x08008788
  ldr r2, =_sbss
 800121c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001220:	20000c7c 	.word	0x20000c7c

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f931 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe9e 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f93b 	bl	8001506 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f911 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000628 	.word	0x20000628

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000628 	.word	0x20000628

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff47 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff5c 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb0 	bl	8001474 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e16b      	b.n	8001814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 815a 	bne.w	800180e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	2b02      	cmp	r3, #2
 8001570:	d130      	bne.n	80015d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 0201 	and.w	r2, r3, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d017      	beq.n	8001610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80b4 	beq.w	800180e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b60      	ldr	r3, [pc, #384]	@ (800182c <HAL_GPIO_Init+0x30c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	4a5f      	ldr	r2, [pc, #380]	@ (800182c <HAL_GPIO_Init+0x30c>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b6:	4b5d      	ldr	r3, [pc, #372]	@ (800182c <HAL_GPIO_Init+0x30c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001830 <HAL_GPIO_Init+0x310>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a52      	ldr	r2, [pc, #328]	@ (8001834 <HAL_GPIO_Init+0x314>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x226>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a51      	ldr	r2, [pc, #324]	@ (8001838 <HAL_GPIO_Init+0x318>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x222>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a50      	ldr	r2, [pc, #320]	@ (800183c <HAL_GPIO_Init+0x31c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x21e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4f      	ldr	r2, [pc, #316]	@ (8001840 <HAL_GPIO_Init+0x320>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x21a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	@ (8001844 <HAL_GPIO_Init+0x324>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x216>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	@ (8001848 <HAL_GPIO_Init+0x328>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x212>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_GPIO_Init+0x32c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x20e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	@ (8001850 <HAL_GPIO_Init+0x330>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x20a>
 8001726:	2307      	movs	r3, #7
 8001728:	e00e      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800172a:	2308      	movs	r3, #8
 800172c:	e00c      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800172e:	2306      	movs	r3, #6
 8001730:	e00a      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001732:	2305      	movs	r3, #5
 8001734:	e008      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001736:	2304      	movs	r3, #4
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800173a:	2303      	movs	r3, #3
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x228>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x228>
 8001746:	2300      	movs	r3, #0
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f002 0203 	and.w	r2, r2, #3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4093      	lsls	r3, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001758:	4935      	ldr	r1, [pc, #212]	@ (8001830 <HAL_GPIO_Init+0x310>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_GPIO_Init+0x334>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800178a:	4a32      	ldr	r2, [pc, #200]	@ (8001854 <HAL_GPIO_Init+0x334>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001790:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <HAL_GPIO_Init+0x334>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ba:	4b26      	ldr	r3, [pc, #152]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017de:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001808:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <HAL_GPIO_Init+0x334>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3301      	adds	r3, #1
 8001812:	61fb      	str	r3, [r7, #28]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	f67f ae90 	bls.w	800153c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40013800 	.word	0x40013800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40021000 	.word	0x40021000
 8001848:	40021400 	.word	0x40021400
 800184c:	40021800 	.word	0x40021800
 8001850:	40021c00 	.word	0x40021c00
 8001854:	40013c00 	.word	0x40013c00

08001858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e12b      	b.n	8001ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff f98c 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	@ 0x24
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018bc:	f002 fcb4 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 80018c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a81      	ldr	r2, [pc, #516]	@ (8001acc <HAL_I2C_Init+0x274>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d807      	bhi.n	80018dc <HAL_I2C_Init+0x84>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a80      	ldr	r2, [pc, #512]	@ (8001ad0 <HAL_I2C_Init+0x278>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bf94      	ite	ls
 80018d4:	2301      	movls	r3, #1
 80018d6:	2300      	movhi	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e006      	b.n	80018ea <HAL_I2C_Init+0x92>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4a7d      	ldr	r2, [pc, #500]	@ (8001ad4 <HAL_I2C_Init+0x27c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	bf94      	ite	ls
 80018e4:	2301      	movls	r3, #1
 80018e6:	2300      	movhi	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0e7      	b.n	8001ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a78      	ldr	r2, [pc, #480]	@ (8001ad8 <HAL_I2C_Init+0x280>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0c9b      	lsrs	r3, r3, #18
 80018fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a6a      	ldr	r2, [pc, #424]	@ (8001acc <HAL_I2C_Init+0x274>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d802      	bhi.n	800192c <HAL_I2C_Init+0xd4>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3301      	adds	r3, #1
 800192a:	e009      	b.n	8001940 <HAL_I2C_Init+0xe8>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	4a69      	ldr	r2, [pc, #420]	@ (8001adc <HAL_I2C_Init+0x284>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	3301      	adds	r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	430b      	orrs	r3, r1
 8001946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	495c      	ldr	r1, [pc, #368]	@ (8001acc <HAL_I2C_Init+0x274>)
 800195c:	428b      	cmp	r3, r1
 800195e:	d819      	bhi.n	8001994 <HAL_I2C_Init+0x13c>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e59      	subs	r1, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fbb1 f3f3 	udiv	r3, r1, r3
 800196e:	1c59      	adds	r1, r3, #1
 8001970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001974:	400b      	ands	r3, r1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_I2C_Init+0x138>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1e59      	subs	r1, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fbb1 f3f3 	udiv	r3, r1, r3
 8001988:	3301      	adds	r3, #1
 800198a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198e:	e051      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001990:	2304      	movs	r3, #4
 8001992:	e04f      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d111      	bne.n	80019c0 <HAL_I2C_Init+0x168>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	440b      	add	r3, r1
 80019aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e012      	b.n	80019e6 <HAL_I2C_Init+0x18e>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	0099      	lsls	r1, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Init+0x196>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e022      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <HAL_I2C_Init+0x1bc>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1e58      	subs	r0, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	440b      	add	r3, r1
 8001a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a12:	e00f      	b.n	8001a34 <HAL_I2C_Init+0x1dc>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6859      	ldr	r1, [r3, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	0099      	lsls	r1, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	6809      	ldr	r1, [r1, #0]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6911      	ldr	r1, [r2, #16]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68d2      	ldr	r2, [r2, #12]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	000186a0 	.word	0x000186a0
 8001ad0:	001e847f 	.word	0x001e847f
 8001ad4:	003d08ff 	.word	0x003d08ff
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afa:	f7ff fbfb 	bl	80012f4 <HAL_GetTick>
 8001afe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	f040 80d9 	bne.w	8001cc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2319      	movs	r3, #25
 8001b14:	2201      	movs	r2, #1
 8001b16:	496d      	ldr	r1, [pc, #436]	@ (8001ccc <HAL_I2C_Mem_Write+0x1ec>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fc8b 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e0cc      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Mem_Write+0x56>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e0c5      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d007      	beq.n	8001b5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2221      	movs	r2, #33	@ 0x21
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8001cd0 <HAL_I2C_Mem_Write+0x1f0>)
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b9e:	88f8      	ldrh	r0, [r7, #6]
 8001ba0:	893a      	ldrh	r2, [r7, #8]
 8001ba2:	8979      	ldrh	r1, [r7, #10]
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	4603      	mov	r3, r0
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fac2 	bl	8002138 <I2C_RequestMemoryWrite>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d052      	beq.n	8001c60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e081      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 fd50 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00d      	beq.n	8001bea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d107      	bne.n	8001be6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06b      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d11b      	bne.n	8001c60 <HAL_I2C_Mem_Write+0x180>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d017      	beq.n	8001c60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1aa      	bne.n	8001bbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fd43 	bl	80026f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00d      	beq.n	8001c94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d107      	bne.n	8001c90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e016      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e000      	b.n	8001cc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	00100002 	.word	0x00100002
 8001cd0:	ffff0000 	.word	0xffff0000

08001cd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	@ 0x30
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	817b      	strh	r3, [r7, #10]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	813b      	strh	r3, [r7, #8]
 8001cea:	4613      	mov	r3, r2
 8001cec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cee:	f7ff fb01 	bl	80012f4 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	f040 8214 	bne.w	800212a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2319      	movs	r3, #25
 8001d08:	2201      	movs	r2, #1
 8001d0a:	497b      	ldr	r1, [pc, #492]	@ (8001ef8 <HAL_I2C_Mem_Read+0x224>)
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fb91 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e207      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Mem_Read+0x56>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e200      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d007      	beq.n	8001d50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2222      	movs	r2, #34	@ 0x22
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2240      	movs	r2, #64	@ 0x40
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001efc <HAL_I2C_Mem_Read+0x228>)
 8001d90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d92:	88f8      	ldrh	r0, [r7, #6]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	8979      	ldrh	r1, [r7, #10]
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	4603      	mov	r3, r0
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fa5e 	bl	8002264 <I2C_RequestMemoryRead>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e1bc      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d113      	bne.n	8001de2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	623b      	str	r3, [r7, #32]
 8001dce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e190      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d11b      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e170      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d11b      	bne.n	8001e62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	e150      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e78:	e144      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f200 80f1 	bhi.w	8002066 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d123      	bne.n	8001ed4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 fc79 	bl	8002788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e145      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ed2:	e117      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d14e      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4906      	ldr	r1, [pc, #24]	@ (8001f00 <HAL_I2C_Mem_Read+0x22c>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 faa4 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e11a      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
 8001ef6:	bf00      	nop
 8001ef8:	00100002 	.word	0x00100002
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f78:	e0c4      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f80:	2200      	movs	r2, #0
 8001f82:	496c      	ldr	r1, [pc, #432]	@ (8002134 <HAL_I2C_Mem_Read+0x460>)
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 fa55 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cb      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fdc:	2200      	movs	r2, #0
 8001fde:	4955      	ldr	r1, [pc, #340]	@ (8002134 <HAL_I2C_Mem_Read+0x460>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fa27 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e09d      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002064:	e04e      	b.n	8002104 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fb8c 	bl	8002788 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e058      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d124      	bne.n	8002104 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	f47f aeb6 	bne.w	8001e7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800212a:	2302      	movs	r3, #2
  }
}
 800212c:	4618      	mov	r0, r3
 800212e:	3728      	adds	r7, #40	@ 0x28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	00010004 	.word	0x00010004

08002138 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	4608      	mov	r0, r1
 8002142:	4611      	mov	r1, r2
 8002144:	461a      	mov	r2, r3
 8002146:	4603      	mov	r3, r0
 8002148:	817b      	strh	r3, [r7, #10]
 800214a:	460b      	mov	r3, r1
 800214c:	813b      	strh	r3, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	2200      	movs	r2, #0
 800216a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f960 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002188:	d103      	bne.n	8002192 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e05f      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	492d      	ldr	r1, [pc, #180]	@ (8002260 <I2C_RequestMemoryWrite+0x128>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f9bb 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04c      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fa46 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d107      	bne.n	80021fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e02b      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002204:	893b      	ldrh	r3, [r7, #8]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e021      	b.n	8002254 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002220:	6a39      	ldr	r1, [r7, #32]
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fa20 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00d      	beq.n	800224a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b04      	cmp	r3, #4
 8002234:	d107      	bne.n	8002246 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002244:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e005      	b.n	8002256 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800224a:	893b      	ldrh	r3, [r7, #8]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	00010002 	.word	0x00010002

08002264 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4603      	mov	r3, r0
 8002274:	817b      	strh	r3, [r7, #10]
 8002276:	460b      	mov	r3, r1
 8002278:	813b      	strh	r3, [r7, #8]
 800227a:	4613      	mov	r3, r2
 800227c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800228c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800229c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	6a3b      	ldr	r3, [r7, #32]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f8c2 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022c4:	d103      	bne.n	80022ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0aa      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	4952      	ldr	r1, [pc, #328]	@ (8002430 <I2C_RequestMemoryRead+0x1cc>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f91d 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e097      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9a8 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2b04      	cmp	r3, #4
 8002324:	d107      	bne.n	8002336 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e076      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	e021      	b.n	8002390 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800234c:	893b      	ldrh	r3, [r7, #8]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f982 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b04      	cmp	r3, #4
 8002370:	d107      	bne.n	8002382 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e050      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002386:	893b      	ldrh	r3, [r7, #8]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002392:	6a39      	ldr	r1, [r7, #32]
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f967 	bl	8002668 <I2C_WaitOnTXEFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d107      	bne.n	80023b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e035      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f82b 	bl	8002434 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f2:	d103      	bne.n	80023fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e013      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	4906      	ldr	r1, [pc, #24]	@ (8002430 <I2C_RequestMemoryRead+0x1cc>)
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f886 	bl	8002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	00010002 	.word	0x00010002

08002434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002444:	e048      	b.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d044      	beq.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	f7fe ff51 	bl	80012f4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d302      	bcc.n	8002464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d139      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0c1b      	lsrs	r3, r3, #16
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d10d      	bne.n	800248a <I2C_WaitOnFlagUntilTimeout+0x56>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	43da      	mvns	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	e00c      	b.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	43da      	mvns	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d116      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e023      	b.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d10d      	bne.n	80024fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	e00c      	b.n	8002518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d093      	beq.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002536:	e071      	b.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d123      	bne.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e067      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d041      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002598:	f7fe feac 	bl	80012f4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d302      	bcc.n	80025ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d136      	bne.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10c      	bne.n	80025d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	e00b      	b.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	43da      	mvns	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e021      	b.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10c      	bne.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	43da      	mvns	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	4013      	ands	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e00b      	b.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f af6d 	bne.w	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002674:	e034      	b.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f8e3 	bl	8002842 <I2C_IsAcknowledgeFailed>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e034      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d028      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fe31 	bl	80012f4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11d      	bne.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ae:	2b80      	cmp	r3, #128	@ 0x80
 80026b0:	d016      	beq.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e007      	b.n	80026f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d1c3      	bne.n	8002676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002704:	e034      	b.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f89b 	bl	8002842 <I2C_IsAcknowledgeFailed>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e034      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d028      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fde9 	bl	80012f4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d016      	beq.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d1c3      	bne.n	8002706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002794:	e049      	b.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d119      	bne.n	80027d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e030      	b.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7fe fd8c 	bl	80012f4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f8:	2b40      	cmp	r3, #64	@ 0x40
 80027fa:	d016      	beq.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	2b40      	cmp	r3, #64	@ 0x40
 8002836:	d1ae      	bne.n	8002796 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002858:	d11b      	bne.n	8002892 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002862:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b08d      	sub	sp, #52	@ 0x34
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 ffd5 	bl	8005866 <USB_GetMode>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 848c 	bne.w	80031dc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 ff39 	bl	8005740 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8482 	beq.w	80031da <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 ff26 	bl	8005740 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 0202 	and.w	r2, r2, #2
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 ff14 	bl	8005740 <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d161      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0210 	bic.w	r2, r2, #16
 8002930:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 020f 	and.w	r2, r3, #15
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800295c:	d124      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d035      	beq.n	80029d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	6a38      	ldr	r0, [r7, #32]
 800297e:	f002 fd8d 	bl	800549c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298e:	441a      	add	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a0:	441a      	add	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	615a      	str	r2, [r3, #20]
 80029a6:	e016      	b.n	80029d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80029ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029b2:	d110      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029ba:	2208      	movs	r2, #8
 80029bc:	4619      	mov	r1, r3
 80029be:	6a38      	ldr	r0, [r7, #32]
 80029c0:	f002 fd6c 	bl	800549c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029d0:	441a      	add	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0210 	orr.w	r2, r2, #16
 80029e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fea8 	bl	8005740 <USB_ReadInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029fa:	f040 80a7 	bne.w	8002b4c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fead 	bl	8005766 <USB_ReadDevAllOutEpInterrupt>
 8002a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a0e:	e099      	b.n	8002b44 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 808e 	beq.w	8002b38 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 fed1 	bl	80057ce <USB_ReadDevOutEPInterrupt>
 8002a2c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fe41 	bl	80036d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 ff17 	bl	80038a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2310      	movs	r3, #16
 8002a90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d030      	beq.n	8002afe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d109      	bne.n	8002abc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	78db      	ldrb	r3, [r3, #3]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f004 f9ca 	bl	8006e80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af8:	461a      	mov	r2, r3
 8002afa:	2302      	movs	r3, #2
 8002afc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b14:	461a      	mov	r2, r3
 8002b16:	2320      	movs	r3, #32
 8002b18:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d009      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b30:	461a      	mov	r2, r3
 8002b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b36:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f af62 	bne.w	8002a10 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 fdf5 	bl	8005740 <USB_ReadInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b60:	f040 80db 	bne.w	8002d1a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fe16 	bl	800579a <USB_ReadDevAllInEpInterrupt>
 8002b6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b74:	e0cd      	b.n	8002d12 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80c2 	beq.w	8002d06 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fe3c 	bl	800580a <USB_ReadDevInEPInterrupt>
 8002b92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d057      	beq.n	8002c4e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69f9      	ldr	r1, [r7, #28]
 8002bba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	799b      	ldrb	r3, [r3, #6]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d132      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3320      	adds	r3, #32
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	331c      	adds	r3, #28
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4419      	add	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4403      	add	r3, r0
 8002c10:	3320      	adds	r3, #32
 8002c12:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d113      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x3a2>
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3324      	adds	r3, #36	@ 0x24
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	f002 fe43 	bl	80058c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4619      	mov	r1, r3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f004 f894 	bl	8006d76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c64:	461a      	mov	r2, r3
 8002c66:	2308      	movs	r3, #8
 8002c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c80:	461a      	mov	r2, r3
 8002c82:	2310      	movs	r3, #16
 8002c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2340      	movs	r3, #64	@ 0x40
 8002ca0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d023      	beq.n	8002cf4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cae:	6a38      	ldr	r0, [r7, #32]
 8002cb0:	f001 ff90 	bl	8004bd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	3310      	adds	r3, #16
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	78db      	ldrb	r3, [r3, #3]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d108      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f004 f8e1 	bl	8006ea4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fc5b 	bl	80035bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	3301      	adds	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f47f af2e 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fd0e 	bl	8005740 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d2e:	d122      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d108      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d56:	2100      	movs	r1, #0
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fde9 	bl	8003930 <HAL_PCDEx_LPM_Callback>
 8002d5e:	e002      	b.n	8002d66 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f004 f87f 	bl	8006e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fce0 	bl	8005740 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8a:	d112      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f004 f83b 	bl	8006e18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002db0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fcc2 	bl	8005740 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc6:	f040 80b7 	bne.w	8002f38 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2110      	movs	r1, #16
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fef5 	bl	8004bd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dee:	e046      	b.n	8002e7e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e48:	0151      	lsls	r1, r2, #5
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	440a      	add	r2, r1
 8002e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e68:	0151      	lsls	r1, r2, #5
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d3b2      	bcc.n	8002df0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e98:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7bdb      	ldrb	r3, [r3, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d016      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb6:	f043 030b 	orr.w	r3, r3, #11
 8002eba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ecc:	f043 030b 	orr.w	r3, r3, #11
 8002ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ed2:	e015      	b.n	8002f00 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ee6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002eea:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efa:	f043 030b 	orr.w	r3, r3, #11
 8002efe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f22:	461a      	mov	r2, r3
 8002f24:	f002 fcd0 	bl	80058c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f002 fbff 	bl	8005740 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f4c:	d123      	bne.n	8002f96 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fc95 	bl	8005882 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fe6b 	bl	8004c38 <USB_GetDevSpeed>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681c      	ldr	r4, [r3, #0]
 8002f6e:	f001 f94f 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8002f72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f001 fd88 	bl	8004a90 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f003 ff20 	bl	8006dc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fbd0 	bl	8005740 <USB_ReadInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f003 fefd 	bl	8006daa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f002 0208 	and.w	r2, r2, #8
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f002 fbbb 	bl	8005740 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b80      	cmp	r3, #128	@ 0x80
 8002fd2:	d123      	bne.n	800301c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe4:	e014      	b.n	8003010 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 faa8 	bl	800355a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	3301      	adds	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	791b      	ldrb	r3, [r3, #4]
 8003014:	461a      	mov	r2, r3
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	4293      	cmp	r3, r2
 800301a:	d3e4      	bcc.n	8002fe6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 fb8d 	bl	8005740 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003030:	d13c      	bne.n	80030ac <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003032:	2301      	movs	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
 8003036:	e02b      	b.n	8003090 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3318      	adds	r3, #24
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d115      	bne.n	800308a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800305e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	da12      	bge.n	800308a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	3317      	adds	r3, #23
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	b2db      	uxtb	r3, r3
 800307c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa68 	bl	800355a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	3301      	adds	r3, #1
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	791b      	ldrb	r3, [r3, #4]
 8003094:	461a      	mov	r2, r3
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	4293      	cmp	r3, r2
 800309a:	d3cd      	bcc.n	8003038 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fb45 	bl	8005740 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c0:	d156      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c2:	2301      	movs	r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c6:	e045      	b.n	8003154 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d12e      	bne.n	800314e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	da2b      	bge.n	800314e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	0c1a      	lsrs	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003100:	4053      	eors	r3, r2
 8003102:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003106:	2b00      	cmp	r3, #0
 8003108:	d121      	bne.n	800314e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800314a:	6053      	str	r3, [r2, #4]
            break;
 800314c:	e008      	b.n	8003160 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	3301      	adds	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	461a      	mov	r2, r3
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	4293      	cmp	r3, r2
 800315e:	d3b3      	bcc.n	80030c8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f002 fae3 	bl	8005740 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d10a      	bne.n	800319c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f003 fe9e 	bl	8006ec8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800319a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f002 facd 	bl	8005740 <USB_ReadInterrupts>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d115      	bne.n	80031dc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f003 fe8e 	bl	8006ee4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
 80031d8:	e000      	b.n	80031dc <HAL_PCD_IRQHandler+0x93c>
      return;
 80031da:	bf00      	nop
    }
  }
}
 80031dc:	3734      	adds	r7, #52	@ 0x34
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}

080031e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	460b      	mov	r3, r1
 80031ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_SetAddress+0x1a>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e012      	b.n	8003222 <HAL_PCD_SetAddress+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fa6e 	bl	80056f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
 8003232:	4608      	mov	r0, r1
 8003234:	4611      	mov	r1, r2
 8003236:	461a      	mov	r2, r3
 8003238:	4603      	mov	r3, r0
 800323a:	70fb      	strb	r3, [r7, #3]
 800323c:	460b      	mov	r3, r1
 800323e:	803b      	strh	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324c:	2b00      	cmp	r3, #0
 800324e:	da0f      	bge.n	8003270 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	3310      	adds	r3, #16
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	705a      	strb	r2, [r3, #1]
 800326e:	e00f      	b.n	8003290 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 020f 	and.w	r2, r3, #15
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	b2da      	uxtb	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800329c:	883b      	ldrh	r3, [r7, #0]
 800329e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	78ba      	ldrb	r2, [r7, #2]
 80032aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032be:	78bb      	ldrb	r3, [r7, #2]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d102      	bne.n	80032ca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_PCD_EP_Open+0xae>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e00e      	b.n	80032f6 <HAL_PCD_EP_Open+0xcc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fccb 	bl	8004c82 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032f4:	7afb      	ldrb	r3, [r7, #11]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	460b      	mov	r3, r1
 800330c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330e:	7afb      	ldrb	r3, [r7, #11]
 8003310:	f003 020f 	and.w	r2, r3, #15
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	799b      	ldrb	r3, [r3, #6]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	799b      	ldrb	r3, [r3, #6]
 8003362:	461a      	mov	r2, r3
 8003364:	6979      	ldr	r1, [r7, #20]
 8003366:	f001 fd13 	bl	8004d90 <USB_EPStartXfer>

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	460b      	mov	r3, r1
 8003382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3310      	adds	r3, #16
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2201      	movs	r2, #1
 80033b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b4:	7afb      	ldrb	r3, [r7, #11]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	799b      	ldrb	r3, [r3, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d102      	bne.n	80033ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	799b      	ldrb	r3, [r3, #6]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	f001 fcd9 	bl	8004d90 <USB_EPStartXfer>

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	7912      	ldrb	r2, [r2, #4]
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e04f      	b.n	80034a6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340a:	2b00      	cmp	r3, #0
 800340c:	da0f      	bge.n	800342e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	3310      	adds	r3, #16
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	705a      	strb	r2, [r3, #1]
 800342c:	e00d      	b.n	800344a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_PCD_EP_SetStall+0x82>
 8003466:	2302      	movs	r3, #2
 8003468:	e01d      	b.n	80034a6 <HAL_PCD_EP_SetStall+0xbe>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	4618      	mov	r0, r3
 800347a:	f002 f867 	bl	800554c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7999      	ldrb	r1, [r3, #6]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003496:	461a      	mov	r2, r3
 8003498:	f002 fa16 	bl	80058c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	7912      	ldrb	r2, [r2, #4]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e042      	b.n	8003552 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da0f      	bge.n	80034f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	f003 020f 	and.w	r2, r3, #15
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	3310      	adds	r3, #16
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	705a      	strb	r2, [r3, #1]
 80034f2:	e00f      	b.n	8003514 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 020f 	and.w	r2, r3, #15
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_PCD_EP_ClrStall+0x86>
 8003530:	2302      	movs	r3, #2
 8003532:	e00e      	b.n	8003552 <HAL_PCD_EP_ClrStall+0xa4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	4618      	mov	r0, r3
 8003544:	f002 f870 	bl	8005628 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	460b      	mov	r3, r1
 8003564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da0c      	bge.n	8003588 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	3310      	adds	r3, #16
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e00c      	b.n	80035a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	f003 020f 	and.w	r2, r3, #15
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 fe8f 	bl	80052cc <USB_EPStopXfer>
 80035ae:	4603      	mov	r3, r0
 80035b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80035b2:	7afb      	ldrb	r3, [r7, #11]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	3310      	adds	r3, #16
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d901      	bls.n	80035f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e06b      	b.n	80036cc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	429a      	cmp	r2, r3
 8003608:	d902      	bls.n	8003610 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3303      	adds	r3, #3
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003618:	e02a      	b.n	8003670 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3303      	adds	r3, #3
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	68d9      	ldr	r1, [r3, #12]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f001 fee4 	bl	8005420 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	441a      	add	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	441a      	add	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d809      	bhi.n	800369a <PCD_WriteEmptyTxFifo+0xde>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800368e:	429a      	cmp	r2, r3
 8003690:	d203      	bcs.n	800369a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1bf      	bne.n	800361a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d811      	bhi.n	80036ca <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	2201      	movs	r2, #1
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	43db      	mvns	r3, r3
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036c6:	4013      	ands	r3, r2
 80036c8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b088      	sub	sp, #32
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	333c      	adds	r3, #60	@ 0x3c
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	799b      	ldrb	r3, [r3, #6]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d17b      	bne.n	8003802 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4a61      	ldr	r2, [pc, #388]	@ (800389c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	f240 80b9 	bls.w	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80b3 	beq.w	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003736:	461a      	mov	r2, r3
 8003738:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800373c:	6093      	str	r3, [r2, #8]
 800373e:	e0a7      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003756:	461a      	mov	r2, r3
 8003758:	2320      	movs	r3, #32
 800375a:	6093      	str	r3, [r2, #8]
 800375c:	e098      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	f040 8093 	bne.w	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	4a4b      	ldr	r2, [pc, #300]	@ (800389c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d90f      	bls.n	8003792 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e07e      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4413      	add	r3, r2
 80037a4:	3304      	adds	r3, #4
 80037a6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037be:	1ad2      	subs	r2, r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037dc:	461a      	mov	r2, r3
 80037de:	2101      	movs	r1, #1
 80037e0:	f002 f872 	bl	80058c8 <USB_EP0_OutStart>
 80037e4:	e006      	b.n	80037f4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	441a      	add	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f003 faa0 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
 8003800:	e046      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4a26      	ldr	r2, [pc, #152]	@ (80038a0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d124      	bne.n	8003854 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e032      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003840:	461a      	mov	r2, r3
 8003842:	2320      	movs	r3, #32
 8003844:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f003 fa77 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
 8003852:	e01d      	b.n	8003890 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d114      	bne.n	8003884 <PCD_EP_OutXfrComplete_int+0x1b0>
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d108      	bne.n	8003884 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800387c:	461a      	mov	r2, r3
 800387e:	2100      	movs	r1, #0
 8003880:	f002 f822 	bl	80058c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f003 fa58 	bl	8006d40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	4f54300a 	.word	0x4f54300a
 80038a0:	4f54310a 	.word	0x4f54310a

080038a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	333c      	adds	r3, #60	@ 0x3c
 80038bc:	3304      	adds	r3, #4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <PCD_EP_OutSetupPacket_int+0x88>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d90e      	bls.n	80038f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f0:	461a      	mov	r2, r3
 80038f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f003 fa0f 	bl	8006d1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <PCD_EP_OutSetupPacket_int+0x88>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d90c      	bls.n	8003920 <PCD_EP_OutSetupPacket_int+0x7c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	799b      	ldrb	r3, [r3, #6]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d108      	bne.n	8003920 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003918:	461a      	mov	r2, r3
 800391a:	2101      	movs	r1, #1
 800391c:	f001 ffd4 	bl	80058c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	4f54300a 	.word	0x4f54300a

08003930 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e267      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d075      	beq.n	8003a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003966:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d00c      	beq.n	800398c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b85      	ldr	r3, [pc, #532]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800397a:	2b08      	cmp	r3, #8
 800397c:	d112      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b82      	ldr	r3, [pc, #520]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d157      	bne.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e242      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x74>
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x98>
 80039c6:	4b70      	ldr	r3, [pc, #448]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6f      	ldr	r2, [pc, #444]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039e0:	4b69      	ldr	r3, [pc, #420]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a68      	ldr	r2, [pc, #416]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b66      	ldr	r3, [pc, #408]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a65      	ldr	r2, [pc, #404]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd fc78 	bl	80012f4 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd fc74 	bl	80012f4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	@ 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e207      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd fc64 	bl	80012f4 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd fc60 	bl	80012f4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	@ 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1f3      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b51      	ldr	r3, [pc, #324]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d063      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d11c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b44      	ldr	r3, [pc, #272]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	4b41      	ldr	r3, [pc, #260]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1c7      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	e03a      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab8:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fd fc19 	bl	80012f4 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fd fc15 	bl	80012f4 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e1a8      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4925      	ldr	r1, [pc, #148]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b24      	ldr	r3, [pc, #144]	@ (8003b8c <HAL_RCC_OscConfig+0x244>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fbf8 	bl	80012f4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fd fbf4 	bl	80012f4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e187      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d036      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <HAL_RCC_OscConfig+0x248>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fbd8 	bl	80012f4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fd fbd4 	bl	80012f4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e167      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x200>
 8003b66:	e01b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_OscConfig+0x248>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd fbc1 	bl	80012f4 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	e00e      	b.n	8003b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fd fbbd 	bl	80012f4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d907      	bls.n	8003b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e150      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	42470000 	.word	0x42470000
 8003b90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b88      	ldr	r3, [pc, #544]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1ea      	bne.n	8003b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8097 	beq.w	8003cdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b81      	ldr	r3, [pc, #516]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	4b7d      	ldr	r3, [pc, #500]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	4a7c      	ldr	r2, [pc, #496]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bce:	4b7a      	ldr	r3, [pc, #488]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bde:	4b77      	ldr	r3, [pc, #476]	@ (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d118      	bne.n	8003c1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bea:	4b74      	ldr	r3, [pc, #464]	@ (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a73      	ldr	r2, [pc, #460]	@ (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf6:	f7fd fb7d 	bl	80012f4 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfe:	f7fd fb79 	bl	80012f4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e10c      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <HAL_RCC_OscConfig+0x474>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2ea>
 8003c24:	4b64      	ldr	r3, [pc, #400]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c28:	4a63      	ldr	r2, [pc, #396]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c30:	e01c      	b.n	8003c6c <HAL_RCC_OscConfig+0x324>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b05      	cmp	r3, #5
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x30c>
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a5e      	ldr	r2, [pc, #376]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c46:	4b5c      	ldr	r3, [pc, #368]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0x324>
 8003c54:	4b58      	ldr	r3, [pc, #352]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c58:	4a57      	ldr	r2, [pc, #348]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c60:	4b55      	ldr	r3, [pc, #340]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c64:	4a54      	ldr	r2, [pc, #336]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0304 	bic.w	r3, r3, #4
 8003c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d015      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c74:	f7fd fb3e 	bl	80012f4 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fb3a 	bl	80012f4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e0cb      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b49      	ldr	r3, [pc, #292]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCC_OscConfig+0x334>
 8003c9e:	e014      	b.n	8003cca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fd fb28 	bl	80012f4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fd fb24 	bl	80012f4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0b5      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd0:	4b39      	ldr	r3, [pc, #228]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a1 	beq.w	8003e28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce6:	4b34      	ldr	r3, [pc, #208]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d05c      	beq.n	8003dac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d141      	bne.n	8003d7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b31      	ldr	r3, [pc, #196]	@ (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd faf8 	bl	80012f4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd faf4 	bl	80012f4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e087      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	019b      	lsls	r3, r3, #6
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3c:	085b      	lsrs	r3, r3, #1
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	491b      	ldr	r1, [pc, #108]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d50:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fd facd 	bl	80012f4 <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5e:	f7fd fac9 	bl	80012f4 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e05c      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	4b11      	ldr	r3, [pc, #68]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x416>
 8003d7c:	e054      	b.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b10      	ldr	r3, [pc, #64]	@ (8003dc0 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd fab6 	bl	80012f4 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd fab2 	bl	80012f4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e045      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x444>
 8003daa:	e03d      	b.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e038      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_RCC_OscConfig+0x4ec>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d028      	beq.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d121      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d11a      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d111      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800

08003e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0cc      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b68      	ldr	r3, [pc, #416]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d90c      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b63      	ldr	r3, [pc, #396]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b8      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d020      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e8c:	4b59      	ldr	r3, [pc, #356]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a58      	ldr	r2, [pc, #352]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ea4:	4b53      	ldr	r3, [pc, #332]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a52      	ldr	r2, [pc, #328]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b50      	ldr	r3, [pc, #320]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	494d      	ldr	r1, [pc, #308]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d044      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d119      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d003      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e06f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f06:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e067      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f16:	4b37      	ldr	r3, [pc, #220]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4934      	ldr	r1, [pc, #208]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fd f9e4 	bl	80012f4 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f30:	f7fd f9e0 	bl	80012f4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e04f      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 020c 	and.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1eb      	bne.n	8003f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f58:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d20c      	bcs.n	8003f80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b20      	ldr	r3, [pc, #128]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e032      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4916      	ldr	r1, [pc, #88]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003faa:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	490e      	ldr	r1, [pc, #56]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fbe:	f000 f821 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	490a      	ldr	r1, [pc, #40]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	5ccb      	ldrb	r3, [r1, r3]
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f944 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023c00 	.word	0x40023c00
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	0800872c 	.word	0x0800872c
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000004 	.word	0x20000004

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004008:	b094      	sub	sp, #80	@ 0x50
 800400a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401c:	4b79      	ldr	r3, [pc, #484]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b08      	cmp	r3, #8
 8004026:	d00d      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x40>
 8004028:	2b08      	cmp	r3, #8
 800402a:	f200 80e1 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x34>
 8004032:	2b04      	cmp	r3, #4
 8004034:	d003      	beq.n	800403e <HAL_RCC_GetSysClockFreq+0x3a>
 8004036:	e0db      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4b73      	ldr	r3, [pc, #460]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x204>)
 800403a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800403c:	e0db      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800403e:	4b73      	ldr	r3, [pc, #460]	@ (800420c <HAL_RCC_GetSysClockFreq+0x208>)
 8004040:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004042:	e0d8      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004044:	4b6f      	ldr	r3, [pc, #444]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800404e:	4b6d      	ldr	r3, [pc, #436]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d063      	beq.n	8004122 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405a:	4b6a      	ldr	r3, [pc, #424]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	2200      	movs	r2, #0
 8004062:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004064:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406c:	633b      	str	r3, [r7, #48]	@ 0x30
 800406e:	2300      	movs	r3, #0
 8004070:	637b      	str	r3, [r7, #52]	@ 0x34
 8004072:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	0159      	lsls	r1, r3, #5
 8004084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004088:	0150      	lsls	r0, r2, #5
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4621      	mov	r1, r4
 8004090:	1a51      	subs	r1, r2, r1
 8004092:	6139      	str	r1, [r7, #16]
 8004094:	4629      	mov	r1, r5
 8004096:	eb63 0301 	sbc.w	r3, r3, r1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a8:	4659      	mov	r1, fp
 80040aa:	018b      	lsls	r3, r1, #6
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b2:	4651      	mov	r1, sl
 80040b4:	018a      	lsls	r2, r1, #6
 80040b6:	4651      	mov	r1, sl
 80040b8:	ebb2 0801 	subs.w	r8, r2, r1
 80040bc:	4659      	mov	r1, fp
 80040be:	eb63 0901 	sbc.w	r9, r3, r1
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040d6:	4690      	mov	r8, r2
 80040d8:	4699      	mov	r9, r3
 80040da:	4623      	mov	r3, r4
 80040dc:	eb18 0303 	adds.w	r3, r8, r3
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	462b      	mov	r3, r5
 80040e4:	eb49 0303 	adc.w	r3, r9, r3
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040f6:	4629      	mov	r1, r5
 80040f8:	024b      	lsls	r3, r1, #9
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004100:	4621      	mov	r1, r4
 8004102:	024a      	lsls	r2, r1, #9
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410a:	2200      	movs	r2, #0
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004110:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004114:	f7fc fb48 	bl	80007a8 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004120:	e058      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004122:	4b38      	ldr	r3, [pc, #224]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	2200      	movs	r2, #0
 800412a:	4618      	mov	r0, r3
 800412c:	4611      	mov	r1, r2
 800412e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004132:	623b      	str	r3, [r7, #32]
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
 8004138:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	0159      	lsls	r1, r3, #5
 800414a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800414e:	0150      	lsls	r0, r2, #5
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4641      	mov	r1, r8
 8004156:	ebb2 0a01 	subs.w	sl, r2, r1
 800415a:	4649      	mov	r1, r9
 800415c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800416c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004170:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004174:	ebb2 040a 	subs.w	r4, r2, sl
 8004178:	eb63 050b 	sbc.w	r5, r3, fp
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	00eb      	lsls	r3, r5, #3
 8004186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	4614      	mov	r4, r2
 800418e:	461d      	mov	r5, r3
 8004190:	4643      	mov	r3, r8
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	464b      	mov	r3, r9
 8004198:	eb45 0303 	adc.w	r3, r5, r3
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041aa:	4629      	mov	r1, r5
 80041ac:	028b      	lsls	r3, r1, #10
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b4:	4621      	mov	r1, r4
 80041b6:	028a      	lsls	r2, r1, #10
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041be:	2200      	movs	r2, #0
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	61fa      	str	r2, [r7, #28]
 80041c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c8:	f7fc faee 	bl	80007a8 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x200>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80041e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x204>)
 80041f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3750      	adds	r7, #80	@ 0x50
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	00f42400 	.word	0x00f42400
 800420c:	007a1200 	.word	0x007a1200

08004210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b03      	ldr	r3, [pc, #12]	@ (8004224 <HAL_RCC_GetHCLKFreq+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000000 	.word	0x20000000

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800422c:	f7ff fff0 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0a9b      	lsrs	r3, r3, #10
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	0800873c 	.word	0x0800873c

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004254:	f7ff ffdc 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0b5b      	lsrs	r3, r3, #13
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	@ (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	0800873c 	.word	0x0800873c

08004278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e042      	b.n	8004310 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc ff50 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	@ 0x24
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f973 	bl	80045a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	@ 0x28
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b20      	cmp	r3, #32
 8004336:	d175      	bne.n	8004424 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit+0x2c>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e06e      	b.n	8004426 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	@ 0x21
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fc ffcd 	bl	80012f4 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004370:	d108      	bne.n	8004384 <HAL_UART_Transmit+0x6c>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e003      	b.n	800438c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800438c:	e02e      	b.n	80043ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	2180      	movs	r1, #128	@ 0x80
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f848 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e03a      	b.n	8004426 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3302      	adds	r3, #2
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e007      	b.n	80043de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	781a      	ldrb	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1cb      	bne.n	800438e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2140      	movs	r1, #64	@ 0x40
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f814 	bl	800442e <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	e03b      	b.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d037      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fc ff54 	bl	80012f4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <UART_WaitOnFlagUntilTimeout+0x30>
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e03a      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d023      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b80      	cmp	r3, #128	@ 0x80
 8004474:	d020      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b40      	cmp	r3, #64	@ 0x40
 800447a:	d01d      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b08      	cmp	r3, #8
 8004488:	d116      	bne.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f81d 	bl	80044e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2208      	movs	r2, #8
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e00f      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d0b4      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b095      	sub	sp, #84	@ 0x54
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004508:	643a      	str	r2, [r7, #64]	@ 0x40
 800450a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800450e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e5      	bne.n	80044e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	61fb      	str	r3, [r7, #28]
   return(result);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3314      	adds	r3, #20
 800453a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800453c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800453e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e5      	bne.n	800451c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004554:	2b01      	cmp	r3, #1
 8004556:	d119      	bne.n	800458c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	60bb      	str	r3, [r7, #8]
   return(result);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0310 	bic.w	r3, r3, #16
 800456e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004578:	61ba      	str	r2, [r7, #24]
 800457a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6979      	ldr	r1, [r7, #20]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	613b      	str	r3, [r7, #16]
   return(result);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800459a:	bf00      	nop
 800459c:	3754      	adds	r7, #84	@ 0x54
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ac:	b0c0      	sub	sp, #256	@ 0x100
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	68d9      	ldr	r1, [r3, #12]
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	ea40 0301 	orr.w	r3, r0, r1
 80045d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	431a      	orrs	r2, r3
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004600:	f021 010c 	bic.w	r1, r1, #12
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800460e:	430b      	orrs	r3, r1
 8004610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	6999      	ldr	r1, [r3, #24]
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	ea40 0301 	orr.w	r3, r0, r1
 800462e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8f      	ldr	r3, [pc, #572]	@ (8004874 <UART_SetConfig+0x2cc>)
 8004638:	429a      	cmp	r2, r3
 800463a:	d005      	beq.n	8004648 <UART_SetConfig+0xa0>
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	4b8d      	ldr	r3, [pc, #564]	@ (8004878 <UART_SetConfig+0x2d0>)
 8004644:	429a      	cmp	r2, r3
 8004646:	d104      	bne.n	8004652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004648:	f7ff fe02 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 800464c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004650:	e003      	b.n	800465a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004652:	f7ff fde9 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8004656:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004664:	f040 810c 	bne.w	8004880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466c:	2200      	movs	r2, #0
 800466e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004672:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800467a:	4622      	mov	r2, r4
 800467c:	462b      	mov	r3, r5
 800467e:	1891      	adds	r1, r2, r2
 8004680:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004682:	415b      	adcs	r3, r3
 8004684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800468a:	4621      	mov	r1, r4
 800468c:	eb12 0801 	adds.w	r8, r2, r1
 8004690:	4629      	mov	r1, r5
 8004692:	eb43 0901 	adc.w	r9, r3, r1
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046aa:	4690      	mov	r8, r2
 80046ac:	4699      	mov	r9, r3
 80046ae:	4623      	mov	r3, r4
 80046b0:	eb18 0303 	adds.w	r3, r8, r3
 80046b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80046b8:	462b      	mov	r3, r5
 80046ba:	eb49 0303 	adc.w	r3, r9, r3
 80046be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80046ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80046d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80046d6:	460b      	mov	r3, r1
 80046d8:	18db      	adds	r3, r3, r3
 80046da:	653b      	str	r3, [r7, #80]	@ 0x50
 80046dc:	4613      	mov	r3, r2
 80046de:	eb42 0303 	adc.w	r3, r2, r3
 80046e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80046e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80046ec:	f7fc f85c 	bl	80007a8 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4b61      	ldr	r3, [pc, #388]	@ (800487c <UART_SetConfig+0x2d4>)
 80046f6:	fba3 2302 	umull	r2, r3, r3, r2
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	011c      	lsls	r4, r3, #4
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004708:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800470c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	1891      	adds	r1, r2, r2
 8004716:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004718:	415b      	adcs	r3, r3
 800471a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800471c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004720:	4641      	mov	r1, r8
 8004722:	eb12 0a01 	adds.w	sl, r2, r1
 8004726:	4649      	mov	r1, r9
 8004728:	eb43 0b01 	adc.w	fp, r3, r1
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800473c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004740:	4692      	mov	sl, r2
 8004742:	469b      	mov	fp, r3
 8004744:	4643      	mov	r3, r8
 8004746:	eb1a 0303 	adds.w	r3, sl, r3
 800474a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800474e:	464b      	mov	r3, r9
 8004750:	eb4b 0303 	adc.w	r3, fp, r3
 8004754:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004764:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800476c:	460b      	mov	r3, r1
 800476e:	18db      	adds	r3, r3, r3
 8004770:	643b      	str	r3, [r7, #64]	@ 0x40
 8004772:	4613      	mov	r3, r2
 8004774:	eb42 0303 	adc.w	r3, r2, r3
 8004778:	647b      	str	r3, [r7, #68]	@ 0x44
 800477a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800477e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004782:	f7fc f811 	bl	80007a8 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4611      	mov	r1, r2
 800478c:	4b3b      	ldr	r3, [pc, #236]	@ (800487c <UART_SetConfig+0x2d4>)
 800478e:	fba3 2301 	umull	r2, r3, r3, r1
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2264      	movs	r2, #100	@ 0x64
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	1acb      	subs	r3, r1, r3
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80047a2:	4b36      	ldr	r3, [pc, #216]	@ (800487c <UART_SetConfig+0x2d4>)
 80047a4:	fba3 2302 	umull	r2, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80047b0:	441c      	add	r4, r3
 80047b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80047c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	1891      	adds	r1, r2, r2
 80047ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047cc:	415b      	adcs	r3, r3
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047d4:	4641      	mov	r1, r8
 80047d6:	1851      	adds	r1, r2, r1
 80047d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80047da:	4649      	mov	r1, r9
 80047dc:	414b      	adcs	r3, r1
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80047ec:	4659      	mov	r1, fp
 80047ee:	00cb      	lsls	r3, r1, #3
 80047f0:	4651      	mov	r1, sl
 80047f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f6:	4651      	mov	r1, sl
 80047f8:	00ca      	lsls	r2, r1, #3
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	4603      	mov	r3, r0
 8004800:	4642      	mov	r2, r8
 8004802:	189b      	adds	r3, r3, r2
 8004804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004808:	464b      	mov	r3, r9
 800480a:	460a      	mov	r2, r1
 800480c:	eb42 0303 	adc.w	r3, r2, r3
 8004810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004820:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004828:	460b      	mov	r3, r1
 800482a:	18db      	adds	r3, r3, r3
 800482c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800482e:	4613      	mov	r3, r2
 8004830:	eb42 0303 	adc.w	r3, r2, r3
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800483a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800483e:	f7fb ffb3 	bl	80007a8 <__aeabi_uldivmod>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <UART_SetConfig+0x2d4>)
 8004848:	fba3 1302 	umull	r1, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	2164      	movs	r1, #100	@ 0x64
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	3332      	adds	r3, #50	@ 0x32
 800485a:	4a08      	ldr	r2, [pc, #32]	@ (800487c <UART_SetConfig+0x2d4>)
 800485c:	fba2 2303 	umull	r2, r3, r2, r3
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f003 0207 	and.w	r2, r3, #7
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4422      	add	r2, r4
 800486e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004870:	e106      	b.n	8004a80 <UART_SetConfig+0x4d8>
 8004872:	bf00      	nop
 8004874:	40011000 	.word	0x40011000
 8004878:	40011400 	.word	0x40011400
 800487c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800488a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800488e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	1891      	adds	r1, r2, r2
 8004898:	6239      	str	r1, [r7, #32]
 800489a:	415b      	adcs	r3, r3
 800489c:	627b      	str	r3, [r7, #36]	@ 0x24
 800489e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a2:	4641      	mov	r1, r8
 80048a4:	1854      	adds	r4, r2, r1
 80048a6:	4649      	mov	r1, r9
 80048a8:	eb43 0501 	adc.w	r5, r3, r1
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	00eb      	lsls	r3, r5, #3
 80048b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ba:	00e2      	lsls	r2, r4, #3
 80048bc:	4614      	mov	r4, r2
 80048be:	461d      	mov	r5, r3
 80048c0:	4643      	mov	r3, r8
 80048c2:	18e3      	adds	r3, r4, r3
 80048c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048c8:	464b      	mov	r3, r9
 80048ca:	eb45 0303 	adc.w	r3, r5, r3
 80048ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048ee:	4629      	mov	r1, r5
 80048f0:	008b      	lsls	r3, r1, #2
 80048f2:	4621      	mov	r1, r4
 80048f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f8:	4621      	mov	r1, r4
 80048fa:	008a      	lsls	r2, r1, #2
 80048fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004900:	f7fb ff52 	bl	80007a8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b60      	ldr	r3, [pc, #384]	@ (8004a8c <UART_SetConfig+0x4e4>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	011c      	lsls	r4, r3, #4
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800491c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	61b9      	str	r1, [r7, #24]
 800492c:	415b      	adcs	r3, r3
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004934:	4641      	mov	r1, r8
 8004936:	1851      	adds	r1, r2, r1
 8004938:	6139      	str	r1, [r7, #16]
 800493a:	4649      	mov	r1, r9
 800493c:	414b      	adcs	r3, r1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800494c:	4659      	mov	r1, fp
 800494e:	00cb      	lsls	r3, r1, #3
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004956:	4651      	mov	r1, sl
 8004958:	00ca      	lsls	r2, r1, #3
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	4603      	mov	r3, r0
 8004960:	4642      	mov	r2, r8
 8004962:	189b      	adds	r3, r3, r2
 8004964:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004968:	464b      	mov	r3, r9
 800496a:	460a      	mov	r2, r1
 800496c:	eb42 0303 	adc.w	r3, r2, r3
 8004970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800497e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800498c:	4649      	mov	r1, r9
 800498e:	008b      	lsls	r3, r1, #2
 8004990:	4641      	mov	r1, r8
 8004992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004996:	4641      	mov	r1, r8
 8004998:	008a      	lsls	r2, r1, #2
 800499a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800499e:	f7fb ff03 	bl	80007a8 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	4b38      	ldr	r3, [pc, #224]	@ (8004a8c <UART_SetConfig+0x4e4>)
 80049aa:	fba3 2301 	umull	r2, r3, r3, r1
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2264      	movs	r2, #100	@ 0x64
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	1acb      	subs	r3, r1, r3
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	3332      	adds	r3, #50	@ 0x32
 80049bc:	4a33      	ldr	r2, [pc, #204]	@ (8004a8c <UART_SetConfig+0x4e4>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049c8:	441c      	add	r4, r3
 80049ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ce:	2200      	movs	r2, #0
 80049d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	415b      	adcs	r3, r3
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e8:	4641      	mov	r1, r8
 80049ea:	1851      	adds	r1, r2, r1
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	4649      	mov	r1, r9
 80049f0:	414b      	adcs	r3, r1
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a00:	4659      	mov	r1, fp
 8004a02:	00cb      	lsls	r3, r1, #3
 8004a04:	4651      	mov	r1, sl
 8004a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	00ca      	lsls	r2, r1, #3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	4642      	mov	r2, r8
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	460a      	mov	r2, r1
 8004a1e:	eb42 0303 	adc.w	r3, r2, r3
 8004a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	008b      	lsls	r3, r1, #2
 8004a40:	4641      	mov	r1, r8
 8004a42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a46:	4641      	mov	r1, r8
 8004a48:	008a      	lsls	r2, r1, #2
 8004a4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004a4e:	f7fb feab 	bl	80007a8 <__aeabi_uldivmod>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <UART_SetConfig+0x4e4>)
 8004a58:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	2164      	movs	r1, #100	@ 0x64
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	3332      	adds	r3, #50	@ 0x32
 8004a6a:	4a08      	ldr	r2, [pc, #32]	@ (8004a8c <UART_SetConfig+0x4e4>)
 8004a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	f003 020f 	and.w	r2, r3, #15
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4422      	add	r2, r4
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a86:	46bd      	mov	sp, r7
 8004a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d165      	bne.n	8004b70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a41      	ldr	r2, [pc, #260]	@ (8004bac <USB_SetTurnaroundTime+0x11c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d906      	bls.n	8004aba <USB_SetTurnaroundTime+0x2a>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a40      	ldr	r2, [pc, #256]	@ (8004bb0 <USB_SetTurnaroundTime+0x120>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d202      	bcs.n	8004aba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ab4:	230f      	movs	r3, #15
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e062      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb0 <USB_SetTurnaroundTime+0x120>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d306      	bcc.n	8004ad0 <USB_SetTurnaroundTime+0x40>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb4 <USB_SetTurnaroundTime+0x124>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d202      	bcs.n	8004ad0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aca:	230e      	movs	r3, #14
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e057      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a38      	ldr	r2, [pc, #224]	@ (8004bb4 <USB_SetTurnaroundTime+0x124>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d306      	bcc.n	8004ae6 <USB_SetTurnaroundTime+0x56>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a37      	ldr	r2, [pc, #220]	@ (8004bb8 <USB_SetTurnaroundTime+0x128>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d202      	bcs.n	8004ae6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ae0:	230d      	movs	r3, #13
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e04c      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a33      	ldr	r2, [pc, #204]	@ (8004bb8 <USB_SetTurnaroundTime+0x128>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d306      	bcc.n	8004afc <USB_SetTurnaroundTime+0x6c>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4a32      	ldr	r2, [pc, #200]	@ (8004bbc <USB_SetTurnaroundTime+0x12c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d802      	bhi.n	8004afc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004af6:	230c      	movs	r3, #12
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e041      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a2f      	ldr	r2, [pc, #188]	@ (8004bbc <USB_SetTurnaroundTime+0x12c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d906      	bls.n	8004b12 <USB_SetTurnaroundTime+0x82>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <USB_SetTurnaroundTime+0x130>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d802      	bhi.n	8004b12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b0c:	230b      	movs	r3, #11
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e036      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a2a      	ldr	r2, [pc, #168]	@ (8004bc0 <USB_SetTurnaroundTime+0x130>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d906      	bls.n	8004b28 <USB_SetTurnaroundTime+0x98>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a29      	ldr	r2, [pc, #164]	@ (8004bc4 <USB_SetTurnaroundTime+0x134>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d802      	bhi.n	8004b28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b22:	230a      	movs	r3, #10
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	e02b      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a26      	ldr	r2, [pc, #152]	@ (8004bc4 <USB_SetTurnaroundTime+0x134>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d906      	bls.n	8004b3e <USB_SetTurnaroundTime+0xae>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a25      	ldr	r2, [pc, #148]	@ (8004bc8 <USB_SetTurnaroundTime+0x138>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d202      	bcs.n	8004b3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b38:	2309      	movs	r3, #9
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e020      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a21      	ldr	r2, [pc, #132]	@ (8004bc8 <USB_SetTurnaroundTime+0x138>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d306      	bcc.n	8004b54 <USB_SetTurnaroundTime+0xc4>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4a20      	ldr	r2, [pc, #128]	@ (8004bcc <USB_SetTurnaroundTime+0x13c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d802      	bhi.n	8004b54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b4e:	2308      	movs	r3, #8
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e015      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <USB_SetTurnaroundTime+0x13c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d906      	bls.n	8004b6a <USB_SetTurnaroundTime+0xda>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <USB_SetTurnaroundTime+0x140>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d202      	bcs.n	8004b6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b64:	2307      	movs	r3, #7
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e00a      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b6a:	2306      	movs	r3, #6
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e007      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b76:	2309      	movs	r3, #9
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e001      	b.n	8004b80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b7c:	2309      	movs	r3, #9
 8004b7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	029b      	lsls	r3, r3, #10
 8004b94:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	00d8acbf 	.word	0x00d8acbf
 8004bb0:	00e4e1c0 	.word	0x00e4e1c0
 8004bb4:	00f42400 	.word	0x00f42400
 8004bb8:	01067380 	.word	0x01067380
 8004bbc:	011a499f 	.word	0x011a499f
 8004bc0:	01312cff 	.word	0x01312cff
 8004bc4:	014ca43f 	.word	0x014ca43f
 8004bc8:	016e3600 	.word	0x016e3600
 8004bcc:	01a6ab1f 	.word	0x01a6ab1f
 8004bd0:	01e84800 	.word	0x01e84800

08004bd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004bee:	d901      	bls.n	8004bf4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e01b      	b.n	8004c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	daf2      	bge.n	8004be2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	019b      	lsls	r3, r3, #6
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c18:	d901      	bls.n	8004c1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e006      	b.n	8004c2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d0f0      	beq.n	8004c0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0306 	and.w	r3, r3, #6
 8004c50:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
 8004c5c:	e00a      	b.n	8004c74 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d002      	beq.n	8004c6a <USB_GetDevSpeed+0x32>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d102      	bne.n	8004c70 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	75fb      	strb	r3, [r7, #23]
 8004c6e:	e001      	b.n	8004c74 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c70:	230f      	movs	r3, #15
 8004c72:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d13a      	bne.n	8004d14 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	2101      	movs	r1, #1
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d155      	bne.n	8004d82 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	791b      	ldrb	r3, [r3, #4]
 8004cf0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cf2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	059b      	lsls	r3, r3, #22
 8004cf8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e036      	b.n	8004d82 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	68f9      	ldr	r1, [r7, #12]
 8004d2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d11a      	bne.n	8004d82 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	791b      	ldrb	r3, [r3, #4]
 8004d66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d80:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	@ 0x28
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 817f 	bne.w	80050b0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d132      	bne.n	8004e20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004dd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004df8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e18:	0cdb      	lsrs	r3, r3, #19
 8004e1a:	04db      	lsls	r3, r3, #19
 8004e1c:	6113      	str	r3, [r2, #16]
 8004e1e:	e097      	b.n	8004f50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e3a:	0cdb      	lsrs	r3, r3, #19
 8004e3c:	04db      	lsls	r3, r3, #19
 8004e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004e5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004e62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11a      	bne.n	8004ea0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d903      	bls.n	8004e7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e9c:	6113      	str	r3, [r2, #16]
 8004e9e:	e044      	b.n	8004f2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	1e5a      	subs	r2, r3, #1
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	04d9      	lsls	r1, r3, #19
 8004ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800515c <USB_EPStartXfer+0x3cc>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	0148      	lsls	r0, r1, #5
 8004ed0:	69f9      	ldr	r1, [r7, #28]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	791b      	ldrb	r3, [r3, #4]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d122      	bne.n	8004f2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004efe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004f02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	8afb      	ldrh	r3, [r7, #22]
 8004f14:	075b      	lsls	r3, r3, #29
 8004f16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	0148      	lsls	r0, r1, #5
 8004f1e:	69f9      	ldr	r1, [r7, #28]
 8004f20:	4401      	add	r1, r0
 8004f22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	0148      	lsls	r0, r1, #5
 8004f44:	69f9      	ldr	r1, [r7, #28]
 8004f46:	4401      	add	r1, r0
 8004f48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d14b      	bne.n	8004fee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d128      	bne.n	8004fcc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d110      	bne.n	8004fac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fa4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e00f      	b.n	8004fcc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fe6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	e166      	b.n	80052bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005008:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800500c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d015      	beq.n	8005042 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 814e 	beq.w	80052bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	69f9      	ldr	r1, [r7, #28]
 8005038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800503c:	4313      	orrs	r3, r2
 800503e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005040:	e13c      	b.n	80052bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d110      	bne.n	8005074 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	0151      	lsls	r1, r2, #5
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	440a      	add	r2, r1
 8005068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800506c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e00f      	b.n	8005094 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005092:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	68d9      	ldr	r1, [r3, #12]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	b298      	uxth	r0, r3
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4603      	mov	r3, r0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9b9 	bl	8005420 <USB_WritePacket>
 80050ae:	e105      	b.n	80052bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ca:	0cdb      	lsrs	r3, r3, #19
 80050cc:	04db      	lsls	r3, r3, #19
 80050ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050f2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d132      	bne.n	8005160 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	0148      	lsls	r0, r1, #5
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	4401      	add	r1, r0
 8005130:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005134:	4313      	orrs	r3, r2
 8005136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005152:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005156:	6113      	str	r3, [r2, #16]
 8005158:	e062      	b.n	8005220 <USB_EPStartXfer+0x490>
 800515a:	bf00      	nop
 800515c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d123      	bne.n	80051b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517e:	69b9      	ldr	r1, [r7, #24]
 8005180:	0148      	lsls	r0, r1, #5
 8005182:	69f9      	ldr	r1, [r7, #28]
 8005184:	4401      	add	r1, r0
 8005186:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800518a:	4313      	orrs	r3, r2
 800518c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051ac:	6113      	str	r3, [r2, #16]
 80051ae:	e037      	b.n	8005220 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4413      	add	r3, r2
 80051ba:	1e5a      	subs	r2, r3, #1
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	8afa      	ldrh	r2, [r7, #22]
 80051cc:	fb03 f202 	mul.w	r2, r3, r2
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	8afb      	ldrh	r3, [r7, #22]
 80051e4:	04d9      	lsls	r1, r3, #19
 80051e6:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <USB_EPStartXfer+0x538>)
 80051e8:	400b      	ands	r3, r1
 80051ea:	69b9      	ldr	r1, [r7, #24]
 80051ec:	0148      	lsls	r0, r1, #5
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	4401      	add	r1, r0
 80051f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80051f6:	4313      	orrs	r3, r2
 80051f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	0148      	lsls	r0, r1, #5
 8005214:	69f9      	ldr	r1, [r7, #28]
 8005216:	4401      	add	r1, r0
 8005218:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800521c:	4313      	orrs	r3, r2
 800521e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10d      	bne.n	8005242 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68d9      	ldr	r1, [r3, #12]
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	460a      	mov	r2, r1
 8005240:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d128      	bne.n	800529c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d110      	bne.n	800527c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005278:	6013      	str	r3, [r2, #0]
 800527a:	e00f      	b.n	800529c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800529a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80052ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	1ff80000 	.word	0x1ff80000

080052cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d14a      	bne.n	8005380 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005302:	f040 8086 	bne.w	8005412 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	7812      	ldrb	r2, [r2, #0]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005328:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3301      	adds	r3, #1
 8005352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800535a:	4293      	cmp	r3, r2
 800535c:	d902      	bls.n	8005364 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	75fb      	strb	r3, [r7, #23]
          break;
 8005362:	e056      	b.n	8005412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800537c:	d0e7      	beq.n	800534e <USB_EPStopXfer+0x82>
 800537e:	e048      	b.n	8005412 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005398:	d13b      	bne.n	8005412 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	7812      	ldrb	r2, [r2, #0]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	7812      	ldrb	r2, [r2, #0]
 80053d2:	0151      	lsls	r1, r2, #5
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	440a      	add	r2, r1
 80053d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d902      	bls.n	80053f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75fb      	strb	r3, [r7, #23]
          break;
 80053f6:	e00c      	b.n	8005412 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800540c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005410:	d0e7      	beq.n	80053e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005420:	b480      	push	{r7}
 8005422:	b089      	sub	sp, #36	@ 0x24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	460b      	mov	r3, r1
 8005430:	71fb      	strb	r3, [r7, #7]
 8005432:	4613      	mov	r3, r2
 8005434:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800543e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d123      	bne.n	800548e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005446:	88bb      	ldrh	r3, [r7, #4]
 8005448:	3303      	adds	r3, #3
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	e018      	b.n	8005486 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	031a      	lsls	r2, r3, #12
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005460:	461a      	mov	r2, r3
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	3301      	adds	r3, #1
 800546c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	3301      	adds	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3301      	adds	r3, #1
 800547e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	3301      	adds	r3, #1
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	429a      	cmp	r2, r3
 800548c:	d3e2      	bcc.n	8005454 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3724      	adds	r7, #36	@ 0x24
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800549c:	b480      	push	{r7}
 800549e:	b08b      	sub	sp, #44	@ 0x2c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	e014      	b.n	80054f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	3301      	adds	r3, #1
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	3301      	adds	r3, #1
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	3301      	adds	r3, #1
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e8:	3301      	adds	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	3301      	adds	r3, #1
 80054f0:	623b      	str	r3, [r7, #32]
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3e6      	bcc.n	80054c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054fa:	8bfb      	ldrh	r3, [r7, #30]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01e      	beq.n	800553e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800550a:	461a      	mov	r2, r3
 800550c:	f107 0310 	add.w	r3, r7, #16
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005524:	701a      	strb	r2, [r3, #0]
      i++;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	3301      	adds	r3, #1
 800552a:	623b      	str	r3, [r7, #32]
      pDest++;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	3301      	adds	r3, #1
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005532:	8bfb      	ldrh	r3, [r7, #30]
 8005534:	3b01      	subs	r3, #1
 8005536:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005538:	8bfb      	ldrh	r3, [r7, #30]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ea      	bne.n	8005514 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005540:	4618      	mov	r0, r3
 8005542:	372c      	adds	r7, #44	@ 0x2c
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d12c      	bne.n	80055c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	db12      	blt.n	80055a0 <USB_EPSetStall+0x54>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00f      	beq.n	80055a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800559e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	e02b      	b.n	800561a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db12      	blt.n	80055fa <USB_EPSetStall+0xae>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00f      	beq.n	80055fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005614:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005618:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d128      	bne.n	8005696 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	0151      	lsls	r1, r2, #5
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	440a      	add	r2, r1
 800565a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800565e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005662:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d003      	beq.n	8005674 <USB_EPClearStall+0x4c>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	791b      	ldrb	r3, [r3, #4]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d138      	bne.n	80056e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	e027      	b.n	80056e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	791b      	ldrb	r3, [r3, #4]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d003      	beq.n	80056c6 <USB_EPClearStall+0x9e>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	791b      	ldrb	r3, [r3, #4]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d10f      	bne.n	80056e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005712:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005716:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4013      	ands	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005758:	68fb      	ldr	r3, [r7, #12]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	0c1b      	lsrs	r3, r3, #16
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	b29b      	uxth	r3, r3
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057fc:	68bb      	ldr	r3, [r7, #8]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800580a:	b480      	push	{r7}
 800580c:	b087      	sub	sp, #28
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	01db      	lsls	r3, r3, #7
 800583c:	b2db      	uxtb	r3, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4013      	ands	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005858:	68bb      	ldr	r3, [r7, #8]
}
 800585a:	4618      	mov	r0, r3
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0301 	and.w	r3, r3, #1
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800589c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80058a0:	f023 0307 	bic.w	r3, r3, #7
 80058a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	460b      	mov	r3, r1
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	333c      	adds	r3, #60	@ 0x3c
 80058de:	3304      	adds	r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4a26      	ldr	r2, [pc, #152]	@ (8005980 <USB_EP0_OutStart+0xb8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d90a      	bls.n	8005902 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058fc:	d101      	bne.n	8005902 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	e037      	b.n	8005972 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005908:	461a      	mov	r2, r3
 800590a:	2300      	movs	r3, #0
 800590c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800591c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005920:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005930:	f043 0318 	orr.w	r3, r3, #24
 8005934:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005944:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005948:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d10f      	bne.n	8005970 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005956:	461a      	mov	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800596a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800596e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	4f54300a 	.word	0x4f54300a

08005984 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800598c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d009      	beq.n	80059c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	4611      	mov	r1, r2
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	4611      	mov	r1, r2
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80059f8:	2303      	movs	r3, #3
 80059fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f8ce 	bl	8006bba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d01a      	beq.n	8005a78 <USBD_LL_SetupStage+0x72>
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d822      	bhi.n	8005a8c <USBD_LL_SetupStage+0x86>
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <USBD_LL_SetupStage+0x4a>
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d00a      	beq.n	8005a64 <USBD_LL_SetupStage+0x5e>
 8005a4e:	e01d      	b.n	8005a8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fb23 	bl	80060a4 <USBD_StdDevReq>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	73fb      	strb	r3, [r7, #15]
      break;
 8005a62:	e020      	b.n	8005aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fb8b 	bl	8006188 <USBD_StdItfReq>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
      break;
 8005a76:	e016      	b.n	8005aa6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fbed 	bl	8006260 <USBD_StdEPReq>
 8005a86:	4603      	mov	r3, r0
 8005a88:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8a:	e00c      	b.n	8005aa6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fa56 	bl	8006f4c <USBD_LL_StallEP>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	bf00      	nop
  }

  return ret;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d177      	bne.n	8005bb8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	f040 80a1 	bne.w	8005c1e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	8992      	ldrh	r2, [r2, #12]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d91c      	bls.n	8005b22 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	8992      	ldrh	r2, [r2, #12]
 8005af0:	1a9a      	subs	r2, r3, r2
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	8992      	ldrh	r2, [r2, #12]
 8005afe:	441a      	add	r2, r3
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6919      	ldr	r1, [r3, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	899b      	ldrh	r3, [r3, #12]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4293      	cmp	r3, r2
 8005b14:	bf38      	it	cc
 8005b16:	4613      	movcc	r3, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 f8c7 	bl	8006cae <USBD_CtlContinueRx>
 8005b20:	e07d      	b.n	8005c1e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d014      	beq.n	8005b5a <USBD_LL_DataOutStage+0xaa>
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d81d      	bhi.n	8005b70 <USBD_LL_DataOutStage+0xc0>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <USBD_LL_DataOutStage+0x8e>
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d003      	beq.n	8005b44 <USBD_LL_DataOutStage+0x94>
 8005b3c:	e018      	b.n	8005b70 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	75bb      	strb	r3, [r7, #22]
            break;
 8005b42:	e018      	b.n	8005b76 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fa6e 	bl	8006030 <USBD_CoreFindIF>
 8005b54:	4603      	mov	r3, r0
 8005b56:	75bb      	strb	r3, [r7, #22]
            break;
 8005b58:	e00d      	b.n	8005b76 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4619      	mov	r1, r3
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fa70 	bl	800604a <USBD_CoreFindEP>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75bb      	strb	r3, [r7, #22]
            break;
 8005b6e:	e002      	b.n	8005b76 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	75bb      	strb	r3, [r7, #22]
            break;
 8005b74:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b76:	7dbb      	ldrb	r3, [r7, #22]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d119      	bne.n	8005bb0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d113      	bne.n	8005bb0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b88:	7dba      	ldrb	r2, [r7, #22]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	32ae      	adds	r2, #174	@ 0xae
 8005b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005b98:	7dba      	ldrb	r2, [r7, #22]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ba0:	7dba      	ldrb	r2, [r7, #22]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	32ae      	adds	r2, #174	@ 0xae
 8005ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f001 f88d 	bl	8006cd0 <USBD_CtlSendStatus>
 8005bb6:	e032      	b.n	8005c1e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fa41 	bl	800604a <USBD_CoreFindEP>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005bcc:	7dbb      	ldrb	r3, [r7, #22]
 8005bce:	2bff      	cmp	r3, #255	@ 0xff
 8005bd0:	d025      	beq.n	8005c1e <USBD_LL_DataOutStage+0x16e>
 8005bd2:	7dbb      	ldrb	r3, [r7, #22]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d122      	bne.n	8005c1e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d117      	bne.n	8005c14 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005be4:	7dba      	ldrb	r2, [r7, #22]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	32ae      	adds	r2, #174	@ 0xae
 8005bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005bf4:	7dba      	ldrb	r2, [r7, #22]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005bfc:	7dba      	ldrb	r2, [r7, #22]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	32ae      	adds	r2, #174	@ 0xae
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	7afa      	ldrb	r2, [r7, #11]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	4798      	blx	r3
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	e000      	b.n	8005c20 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	460b      	mov	r3, r1
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d178      	bne.n	8005d2e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d163      	bne.n	8005d14 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	8992      	ldrh	r2, [r2, #12]
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d91c      	bls.n	8005c92 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	8992      	ldrh	r2, [r2, #12]
 8005c60:	1a9a      	subs	r2, r3, r2
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	8992      	ldrh	r2, [r2, #12]
 8005c6e:	441a      	add	r2, r3
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6919      	ldr	r1, [r3, #16]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f001 f804 	bl	8006c8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f001 fa08 	bl	80070a0 <USBD_LL_PrepareReceive>
 8005c90:	e040      	b.n	8005d14 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	899b      	ldrh	r3, [r3, #12]
 8005c96:	461a      	mov	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d11c      	bne.n	8005cda <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d316      	bcc.n	8005cda <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d20f      	bcs.n	8005cda <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 ffe4 	bl	8006c8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f001 f9e4 	bl	80070a0 <USBD_LL_PrepareReceive>
 8005cd8:	e01c      	b.n	8005d14 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d10f      	bne.n	8005d06 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d06:	2180      	movs	r1, #128	@ 0x80
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f001 f91f 	bl	8006f4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fff1 	bl	8006cf6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d03a      	beq.n	8005d94 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fe30 	bl	8005984 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005d2c:	e032      	b.n	8005d94 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d2e:	7afb      	ldrb	r3, [r7, #11]
 8005d30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f986 	bl	800604a <USBD_CoreFindEP>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2bff      	cmp	r3, #255	@ 0xff
 8005d46:	d025      	beq.n	8005d94 <USBD_LL_DataInStage+0x16c>
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d122      	bne.n	8005d94 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d11c      	bne.n	8005d94 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d5a:	7dfa      	ldrb	r2, [r7, #23]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	32ae      	adds	r2, #174	@ 0xae
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d014      	beq.n	8005d94 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005d6a:	7dfa      	ldrb	r2, [r7, #23]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d72:	7dfa      	ldrb	r2, [r7, #23]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	32ae      	adds	r2, #174	@ 0xae
 8005d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	7afa      	ldrb	r2, [r7, #11]
 8005d80:	4611      	mov	r1, r2
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	4798      	blx	r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d8a:	7dbb      	ldrb	r3, [r7, #22]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005d90:	7dbb      	ldrb	r3, [r7, #22]
 8005d92:	e000      	b.n	8005d96 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6852      	ldr	r2, [r2, #4]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	4611      	mov	r1, r2
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e00:	2303      	movs	r3, #3
 8005e02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e04:	2340      	movs	r3, #64	@ 0x40
 8005e06:	2200      	movs	r2, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f878 	bl	8006f00 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	@ 0x40
 8005e1c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e20:	2340      	movs	r3, #64	@ 0x40
 8005e22:	2200      	movs	r2, #0
 8005e24:	2180      	movs	r1, #128	@ 0x80
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 f86a 	bl	8006f00 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	841a      	strh	r2, [r3, #32]

  return ret;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d006      	beq.n	8005e86 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d106      	bne.n	8005ebe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d110      	bne.n	8005f02 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	32ae      	adds	r2, #174	@ 0xae
 8005f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e01c      	b.n	8005f68 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d115      	bne.n	8005f66 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	32ae      	adds	r2, #174	@ 0xae
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	32ae      	adds	r2, #174	@ 0xae
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	4611      	mov	r1, r2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32ae      	adds	r2, #174	@ 0xae
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e01c      	b.n	8005fcc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d115      	bne.n	8005fca <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	32ae      	adds	r2, #174	@ 0xae
 8005fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00b      	beq.n	8005fca <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	32ae      	adds	r2, #174	@ 0xae
 8005fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6852      	ldr	r2, [r2, #4]
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	4611      	mov	r1, r2
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006022:	2303      	movs	r3, #3
 8006024:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006026:	7bfb      	ldrb	r3, [r7, #15]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	460b      	mov	r3, r1
 800603a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800603c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006056:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006058:	4618      	mov	r0, r3
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006082:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	b21a      	sxth	r2, r3
 800608a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800608e:	4313      	orrs	r3, r2
 8006090:	b21b      	sxth	r3, r3
 8006092:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006094:	89fb      	ldrh	r3, [r7, #14]
}
 8006096:	4618      	mov	r0, r3
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d005      	beq.n	80060ca <USBD_StdDevReq+0x26>
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d857      	bhi.n	8006172 <USBD_StdDevReq+0xce>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00f      	beq.n	80060e6 <USBD_StdDevReq+0x42>
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d153      	bne.n	8006172 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	32ae      	adds	r2, #174	@ 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
      break;
 80060e4:	e04a      	b.n	800617c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b09      	cmp	r3, #9
 80060ec:	d83b      	bhi.n	8006166 <USBD_StdDevReq+0xc2>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <USBD_StdDevReq+0x50>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006149 	.word	0x08006149
 80060f8:	0800615d 	.word	0x0800615d
 80060fc:	08006167 	.word	0x08006167
 8006100:	08006153 	.word	0x08006153
 8006104:	08006167 	.word	0x08006167
 8006108:	08006127 	.word	0x08006127
 800610c:	0800611d 	.word	0x0800611d
 8006110:	08006167 	.word	0x08006167
 8006114:	0800613f 	.word	0x0800613f
 8006118:	08006131 	.word	0x08006131
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa3e 	bl	80065a0 <USBD_GetDescriptor>
          break;
 8006124:	e024      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fba3 	bl	8006874 <USBD_SetAddress>
          break;
 800612e:	e01f      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fbe2 	bl	80068fc <USBD_SetConfig>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]
          break;
 800613c:	e018      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fc85 	bl	8006a50 <USBD_GetConfig>
          break;
 8006146:	e013      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fcb6 	bl	8006abc <USBD_GetStatus>
          break;
 8006150:	e00e      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fce5 	bl	8006b24 <USBD_SetFeature>
          break;
 800615a:	e009      	b.n	8006170 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fd09 	bl	8006b76 <USBD_ClrFeature>
          break;
 8006164:	e004      	b.n	8006170 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fd60 	bl	8006c2e <USBD_CtlError>
          break;
 800616e:	bf00      	nop
      }
      break;
 8006170:	e004      	b.n	800617c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fd5a 	bl	8006c2e <USBD_CtlError>
      break;
 800617a:	bf00      	nop
  }

  return ret;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800619e:	2b40      	cmp	r3, #64	@ 0x40
 80061a0:	d005      	beq.n	80061ae <USBD_StdItfReq+0x26>
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d852      	bhi.n	800624c <USBD_StdItfReq+0xc4>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <USBD_StdItfReq+0x26>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d14e      	bne.n	800624c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d840      	bhi.n	800623e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	889b      	ldrh	r3, [r3, #4]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d836      	bhi.n	8006234 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	889b      	ldrh	r3, [r3, #4]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	4619      	mov	r1, r3
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7ff ff2e 	bl	8006030 <USBD_CoreFindIF>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2bff      	cmp	r3, #255	@ 0xff
 80061dc:	d01d      	beq.n	800621a <USBD_StdItfReq+0x92>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11a      	bne.n	800621a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80061e4:	7bba      	ldrb	r2, [r7, #14]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	32ae      	adds	r2, #174	@ 0xae
 80061ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00f      	beq.n	8006214 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061f4:	7bba      	ldrb	r2, [r7, #14]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061fc:	7bba      	ldrb	r2, [r7, #14]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32ae      	adds	r2, #174	@ 0xae
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006212:	e004      	b.n	800621e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006214:	2303      	movs	r3, #3
 8006216:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006218:	e001      	b.n	800621e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800621a:	2303      	movs	r3, #3
 800621c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	88db      	ldrh	r3, [r3, #6]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d110      	bne.n	8006248 <USBD_StdItfReq+0xc0>
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10d      	bne.n	8006248 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fd4f 	bl	8006cd0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006232:	e009      	b.n	8006248 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fcf9 	bl	8006c2e <USBD_CtlError>
          break;
 800623c:	e004      	b.n	8006248 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fcf4 	bl	8006c2e <USBD_CtlError>
          break;
 8006246:	e000      	b.n	800624a <USBD_StdItfReq+0xc2>
          break;
 8006248:	bf00      	nop
      }
      break;
 800624a:	e004      	b.n	8006256 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fced 	bl	8006c2e <USBD_CtlError>
      break;
 8006254:	bf00      	nop
  }

  return ret;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	889b      	ldrh	r3, [r3, #4]
 8006272:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d007      	beq.n	8006290 <USBD_StdEPReq+0x30>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	f200 8181 	bhi.w	8006588 <USBD_StdEPReq+0x328>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02a      	beq.n	80062e0 <USBD_StdEPReq+0x80>
 800628a:	2b20      	cmp	r3, #32
 800628c:	f040 817c 	bne.w	8006588 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006290:	7bbb      	ldrb	r3, [r7, #14]
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fed8 	bl	800604a <USBD_CoreFindEP>
 800629a:	4603      	mov	r3, r0
 800629c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2bff      	cmp	r3, #255	@ 0xff
 80062a2:	f000 8176 	beq.w	8006592 <USBD_StdEPReq+0x332>
 80062a6:	7b7b      	ldrb	r3, [r7, #13]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8172 	bne.w	8006592 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80062ae:	7b7a      	ldrb	r2, [r7, #13]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80062b6:	7b7a      	ldrb	r2, [r7, #13]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32ae      	adds	r2, #174	@ 0xae
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8165 	beq.w	8006592 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80062c8:	7b7a      	ldrb	r2, [r7, #13]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32ae      	adds	r2, #174	@ 0xae
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062de:	e158      	b.n	8006592 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	785b      	ldrb	r3, [r3, #1]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d008      	beq.n	80062fa <USBD_StdEPReq+0x9a>
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	f300 8147 	bgt.w	800657c <USBD_StdEPReq+0x31c>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 809b 	beq.w	800642a <USBD_StdEPReq+0x1ca>
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d03c      	beq.n	8006372 <USBD_StdEPReq+0x112>
 80062f8:	e140      	b.n	800657c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d002      	beq.n	800630c <USBD_StdEPReq+0xac>
 8006306:	2b03      	cmp	r3, #3
 8006308:	d016      	beq.n	8006338 <USBD_StdEPReq+0xd8>
 800630a:	e02c      	b.n	8006366 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <USBD_StdEPReq+0xce>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d00a      	beq.n	800632e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fe15 	bl	8006f4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006322:	2180      	movs	r1, #128	@ 0x80
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fe11 	bl	8006f4c <USBD_LL_StallEP>
 800632a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800632c:	e020      	b.n	8006370 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc7c 	bl	8006c2e <USBD_CtlError>
              break;
 8006336:	e01b      	b.n	8006370 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10e      	bne.n	800635e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00b      	beq.n	800635e <USBD_StdEPReq+0xfe>
 8006346:	7bbb      	ldrb	r3, [r7, #14]
 8006348:	2b80      	cmp	r3, #128	@ 0x80
 800634a:	d008      	beq.n	800635e <USBD_StdEPReq+0xfe>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	88db      	ldrh	r3, [r3, #6]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fdf7 	bl	8006f4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fcb6 	bl	8006cd0 <USBD_CtlSendStatus>

              break;
 8006364:	e004      	b.n	8006370 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc60 	bl	8006c2e <USBD_CtlError>
              break;
 800636e:	bf00      	nop
          }
          break;
 8006370:	e109      	b.n	8006586 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d002      	beq.n	8006384 <USBD_StdEPReq+0x124>
 800637e:	2b03      	cmp	r3, #3
 8006380:	d016      	beq.n	80063b0 <USBD_StdEPReq+0x150>
 8006382:	e04b      	b.n	800641c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <USBD_StdEPReq+0x146>
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d00a      	beq.n	80063a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	4619      	mov	r1, r3
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fdd9 	bl	8006f4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fdd5 	bl	8006f4c <USBD_LL_StallEP>
 80063a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063a4:	e040      	b.n	8006428 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc40 	bl	8006c2e <USBD_CtlError>
              break;
 80063ae:	e03b      	b.n	8006428 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	885b      	ldrh	r3, [r3, #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d136      	bne.n	8006426 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fddf 	bl	8006f8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fc7f 	bl	8006cd0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fe37 	bl	800604a <USBD_CoreFindEP>
 80063dc:	4603      	mov	r3, r0
 80063de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063e0:	7b7b      	ldrb	r3, [r7, #13]
 80063e2:	2bff      	cmp	r3, #255	@ 0xff
 80063e4:	d01f      	beq.n	8006426 <USBD_StdEPReq+0x1c6>
 80063e6:	7b7b      	ldrb	r3, [r7, #13]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d11c      	bne.n	8006426 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063ec:	7b7a      	ldrb	r2, [r7, #13]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063f4:	7b7a      	ldrb	r2, [r7, #13]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32ae      	adds	r2, #174	@ 0xae
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006404:	7b7a      	ldrb	r2, [r7, #13]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	32ae      	adds	r2, #174	@ 0xae
 800640a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800641a:	e004      	b.n	8006426 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc05 	bl	8006c2e <USBD_CtlError>
              break;
 8006424:	e000      	b.n	8006428 <USBD_StdEPReq+0x1c8>
              break;
 8006426:	bf00      	nop
          }
          break;
 8006428:	e0ad      	b.n	8006586 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d002      	beq.n	800643c <USBD_StdEPReq+0x1dc>
 8006436:	2b03      	cmp	r3, #3
 8006438:	d033      	beq.n	80064a2 <USBD_StdEPReq+0x242>
 800643a:	e099      	b.n	8006570 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <USBD_StdEPReq+0x1f2>
 8006442:	7bbb      	ldrb	r3, [r7, #14]
 8006444:	2b80      	cmp	r3, #128	@ 0x80
 8006446:	d004      	beq.n	8006452 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fbef 	bl	8006c2e <USBD_CtlError>
                break;
 8006450:	e093      	b.n	800657a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da0b      	bge.n	8006472 <USBD_StdEPReq+0x212>
 800645a:	7bbb      	ldrb	r3, [r7, #14]
 800645c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3310      	adds	r3, #16
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	e00b      	b.n	800648a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	4413      	add	r3, r2
 8006488:	3304      	adds	r3, #4
 800648a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	330e      	adds	r3, #14
 8006496:	2202      	movs	r2, #2
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fbd8 	bl	8006c50 <USBD_CtlSendData>
              break;
 80064a0:	e06b      	b.n	800657a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da11      	bge.n	80064ce <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3323      	adds	r3, #35	@ 0x23
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d117      	bne.n	80064f4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fbb1 	bl	8006c2e <USBD_CtlError>
                  break;
 80064cc:	e055      	b.n	800657a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fb9e 	bl	8006c2e <USBD_CtlError>
                  break;
 80064f2:	e042      	b.n	800657a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da0b      	bge.n	8006514 <USBD_StdEPReq+0x2b4>
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3310      	adds	r3, #16
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	e00b      	b.n	800652c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	3304      	adds	r3, #4
 800652c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <USBD_StdEPReq+0x2da>
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b80      	cmp	r3, #128	@ 0x80
 8006538:	d103      	bne.n	8006542 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	739a      	strb	r2, [r3, #14]
 8006540:	e00e      	b.n	8006560 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd3e 	bl	8006fc8 <USBD_LL_IsStallEP>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2201      	movs	r2, #1
 8006556:	739a      	strb	r2, [r3, #14]
 8006558:	e002      	b.n	8006560 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	330e      	adds	r3, #14
 8006564:	2202      	movs	r2, #2
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb71 	bl	8006c50 <USBD_CtlSendData>
              break;
 800656e:	e004      	b.n	800657a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fb5b 	bl	8006c2e <USBD_CtlError>
              break;
 8006578:	bf00      	nop
          }
          break;
 800657a:	e004      	b.n	8006586 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb55 	bl	8006c2e <USBD_CtlError>
          break;
 8006584:	bf00      	nop
      }
      break;
 8006586:	e005      	b.n	8006594 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fb4f 	bl	8006c2e <USBD_CtlError>
      break;
 8006590:	e000      	b.n	8006594 <USBD_StdEPReq+0x334>
      break;
 8006592:	bf00      	nop
  }

  return ret;
 8006594:	7bfb      	ldrb	r3, [r7, #15]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	2b06      	cmp	r3, #6
 80065c2:	f200 8128 	bhi.w	8006816 <USBD_GetDescriptor+0x276>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <USBD_GetDescriptor+0x2c>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e9 	.word	0x080065e9
 80065d0:	08006601 	.word	0x08006601
 80065d4:	08006641 	.word	0x08006641
 80065d8:	08006817 	.word	0x08006817
 80065dc:	08006817 	.word	0x08006817
 80065e0:	080067b7 	.word	0x080067b7
 80065e4:	080067e3 	.word	0x080067e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
      break;
 80065fe:	e112      	b.n	8006826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	7c1b      	ldrb	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10d      	bne.n	8006624 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800660e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006610:	f107 0208 	add.w	r2, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	2202      	movs	r2, #2
 8006620:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006622:	e100      	b.n	8006826 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	f107 0208 	add.w	r2, r7, #8
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
 8006634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	2202      	movs	r2, #2
 800663c:	701a      	strb	r2, [r3, #0]
      break;
 800663e:	e0f2      	b.n	8006826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	885b      	ldrh	r3, [r3, #2]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b05      	cmp	r3, #5
 8006648:	f200 80ac 	bhi.w	80067a4 <USBD_GetDescriptor+0x204>
 800664c:	a201      	add	r2, pc, #4	@ (adr r2, 8006654 <USBD_GetDescriptor+0xb4>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	0800666d 	.word	0x0800666d
 8006658:	080066a1 	.word	0x080066a1
 800665c:	080066d5 	.word	0x080066d5
 8006660:	08006709 	.word	0x08006709
 8006664:	0800673d 	.word	0x0800673d
 8006668:	08006771 	.word	0x08006771
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	7c12      	ldrb	r2, [r2, #16]
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	4610      	mov	r0, r2
 800668a:	4798      	blx	r3
 800668c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668e:	e091      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 facb 	bl	8006c2e <USBD_CtlError>
            err++;
 8006698:	7afb      	ldrb	r3, [r7, #11]
 800669a:	3301      	adds	r3, #1
 800669c:	72fb      	strb	r3, [r7, #11]
          break;
 800669e:	e089      	b.n	80067b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	7c12      	ldrb	r2, [r2, #16]
 80066b8:	f107 0108 	add.w	r1, r7, #8
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
 80066c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066c2:	e077      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fab1 	bl	8006c2e <USBD_CtlError>
            err++;
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	3301      	adds	r3, #1
 80066d0:	72fb      	strb	r3, [r7, #11]
          break;
 80066d2:	e06f      	b.n	80067b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	7c12      	ldrb	r2, [r2, #16]
 80066ec:	f107 0108 	add.w	r1, r7, #8
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
 80066f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f6:	e05d      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fa97 	bl	8006c2e <USBD_CtlError>
            err++;
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	3301      	adds	r3, #1
 8006704:	72fb      	strb	r3, [r7, #11]
          break;
 8006706:	e055      	b.n	80067b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	7c12      	ldrb	r2, [r2, #16]
 8006720:	f107 0108 	add.w	r1, r7, #8
 8006724:	4610      	mov	r0, r2
 8006726:	4798      	blx	r3
 8006728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800672a:	e043      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa7d 	bl	8006c2e <USBD_CtlError>
            err++;
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	3301      	adds	r3, #1
 8006738:	72fb      	strb	r3, [r7, #11]
          break;
 800673a:	e03b      	b.n	80067b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675e:	e029      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa63 	bl	8006c2e <USBD_CtlError>
            err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
          break;
 800676e:	e021      	b.n	80067b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	7c12      	ldrb	r2, [r2, #16]
 8006788:	f107 0108 	add.w	r1, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006792:	e00f      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa49 	bl	8006c2e <USBD_CtlError>
            err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
          break;
 80067a2:	e007      	b.n	80067b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa41 	bl	8006c2e <USBD_CtlError>
          err++;
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	3301      	adds	r3, #1
 80067b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80067b2:	bf00      	nop
      }
      break;
 80067b4:	e037      	b.n	8006826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	7c1b      	ldrb	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c6:	f107 0208 	add.w	r2, r7, #8
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
 80067ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067d0:	e029      	b.n	8006826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fa2a 	bl	8006c2e <USBD_CtlError>
        err++;
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	3301      	adds	r3, #1
 80067de:	72fb      	strb	r3, [r7, #11]
      break;
 80067e0:	e021      	b.n	8006826 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7c1b      	ldrb	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10d      	bne.n	8006806 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	f107 0208 	add.w	r2, r7, #8
 80067f6:	4610      	mov	r0, r2
 80067f8:	4798      	blx	r3
 80067fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	2207      	movs	r2, #7
 8006802:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006804:	e00f      	b.n	8006826 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa10 	bl	8006c2e <USBD_CtlError>
        err++;
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	3301      	adds	r3, #1
 8006812:	72fb      	strb	r3, [r7, #11]
      break;
 8006814:	e007      	b.n	8006826 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fa08 	bl	8006c2e <USBD_CtlError>
      err++;
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	3301      	adds	r3, #1
 8006822:	72fb      	strb	r3, [r7, #11]
      break;
 8006824:	bf00      	nop
  }

  if (err != 0U)
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d11e      	bne.n	800686a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	88db      	ldrh	r3, [r3, #6]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d016      	beq.n	8006862 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88da      	ldrh	r2, [r3, #6]
 800683e:	893b      	ldrh	r3, [r7, #8]
 8006840:	4293      	cmp	r3, r2
 8006842:	bf28      	it	cs
 8006844:	4613      	movcs	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	461a      	mov	r2, r3
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f9fd 	bl	8006c50 <USBD_CtlSendData>
 8006856:	e009      	b.n	800686c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f9e7 	bl	8006c2e <USBD_CtlError>
 8006860:	e004      	b.n	800686c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa34 	bl	8006cd0 <USBD_CtlSendStatus>
 8006868:	e000      	b.n	800686c <USBD_GetDescriptor+0x2cc>
    return;
 800686a:	bf00      	nop
  }
}
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop

08006874 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	889b      	ldrh	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d131      	bne.n	80068ea <USBD_SetAddress+0x76>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	88db      	ldrh	r3, [r3, #6]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d12d      	bne.n	80068ea <USBD_SetAddress+0x76>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	2b7f      	cmp	r3, #127	@ 0x7f
 8006894:	d829      	bhi.n	80068ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	885b      	ldrh	r3, [r3, #2]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d104      	bne.n	80068b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f9bc 	bl	8006c2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b6:	e01d      	b.n	80068f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fbab 	bl	8007020 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa00 	bl	8006cd0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	e009      	b.n	80068f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068e8:	e004      	b.n	80068f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f99e 	bl	8006c2e <USBD_CtlError>
  }
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	885b      	ldrh	r3, [r3, #2]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	4b4e      	ldr	r3, [pc, #312]	@ (8006a4c <USBD_SetConfig+0x150>)
 8006912:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006914:	4b4d      	ldr	r3, [pc, #308]	@ (8006a4c <USBD_SetConfig+0x150>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d905      	bls.n	8006928 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f985 	bl	8006c2e <USBD_CtlError>
    return USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	e08c      	b.n	8006a42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d002      	beq.n	800693a <USBD_SetConfig+0x3e>
 8006934:	2b03      	cmp	r3, #3
 8006936:	d029      	beq.n	800698c <USBD_SetConfig+0x90>
 8006938:	e075      	b.n	8006a26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800693a:	4b44      	ldr	r3, [pc, #272]	@ (8006a4c <USBD_SetConfig+0x150>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006942:	4b42      	ldr	r3, [pc, #264]	@ (8006a4c <USBD_SetConfig+0x150>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800694c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a4c <USBD_SetConfig+0x150>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7ff f821 	bl	800599a <USBD_SetClassConfig>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f962 	bl	8006c2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006972:	e065      	b.n	8006a40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f9ab 	bl	8006cd0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2203      	movs	r2, #3
 800697e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006982:	e05d      	b.n	8006a40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f9a3 	bl	8006cd0 <USBD_CtlSendStatus>
      break;
 800698a:	e059      	b.n	8006a40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800698c:	4b2f      	ldr	r3, [pc, #188]	@ (8006a4c <USBD_SetConfig+0x150>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d112      	bne.n	80069ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800699c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a4c <USBD_SetConfig+0x150>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069a6:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <USBD_SetConfig+0x150>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff f810 	bl	80059d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f98c 	bl	8006cd0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069b8:	e042      	b.n	8006a40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80069ba:	4b24      	ldr	r3, [pc, #144]	@ (8006a4c <USBD_SetConfig+0x150>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d02a      	beq.n	8006a1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fe fffe 	bl	80059d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069d6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <USBD_SetConfig+0x150>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069e0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <USBD_SetConfig+0x150>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fe ffd7 	bl	800599a <USBD_SetClassConfig>
 80069ec:	4603      	mov	r3, r0
 80069ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00f      	beq.n	8006a16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f918 	bl	8006c2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fe ffe3 	bl	80059d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a14:	e014      	b.n	8006a40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f95a 	bl	8006cd0 <USBD_CtlSendStatus>
      break;
 8006a1c:	e010      	b.n	8006a40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f956 	bl	8006cd0 <USBD_CtlSendStatus>
      break;
 8006a24:	e00c      	b.n	8006a40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f900 	bl	8006c2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a2e:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <USBD_SetConfig+0x150>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fe ffcc 	bl	80059d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3e:	bf00      	nop
  }

  return ret;
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000062c 	.word	0x2000062c

08006a50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d004      	beq.n	8006a6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8e2 	bl	8006c2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a6a:	e023      	b.n	8006ab4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	dc02      	bgt.n	8006a7e <USBD_GetConfig+0x2e>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	dc03      	bgt.n	8006a84 <USBD_GetConfig+0x34>
 8006a7c:	e015      	b.n	8006aaa <USBD_GetConfig+0x5a>
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d00b      	beq.n	8006a9a <USBD_GetConfig+0x4a>
 8006a82:	e012      	b.n	8006aaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8dc 	bl	8006c50 <USBD_CtlSendData>
        break;
 8006a98:	e00c      	b.n	8006ab4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f8d4 	bl	8006c50 <USBD_CtlSendData>
        break;
 8006aa8:	e004      	b.n	8006ab4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8be 	bl	8006c2e <USBD_CtlError>
        break;
 8006ab2:	bf00      	nop
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d81e      	bhi.n	8006b12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d004      	beq.n	8006ae6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8a5 	bl	8006c2e <USBD_CtlError>
        break;
 8006ae4:	e01a      	b.n	8006b1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f043 0202 	orr.w	r2, r3, #2
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	330c      	adds	r3, #12
 8006b06:	2202      	movs	r2, #2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8a0 	bl	8006c50 <USBD_CtlSendData>
      break;
 8006b10:	e004      	b.n	8006b1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f88a 	bl	8006c2e <USBD_CtlError>
      break;
 8006b1a:	bf00      	nop
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d107      	bne.n	8006b46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f8c6 	bl	8006cd0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006b44:	e013      	b.n	8006b6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	885b      	ldrh	r3, [r3, #2]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d10b      	bne.n	8006b66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	889b      	ldrh	r3, [r3, #4]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f8b6 	bl	8006cd0 <USBD_CtlSendStatus>
}
 8006b64:	e003      	b.n	8006b6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f860 	bl	8006c2e <USBD_CtlError>
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b082      	sub	sp, #8
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d80b      	bhi.n	8006ba6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	885b      	ldrh	r3, [r3, #2]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d10c      	bne.n	8006bb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f896 	bl	8006cd0 <USBD_CtlSendStatus>
      }
      break;
 8006ba4:	e004      	b.n	8006bb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f840 	bl	8006c2e <USBD_CtlError>
      break;
 8006bae:	e000      	b.n	8006bb2 <USBD_ClrFeature+0x3c>
      break;
 8006bb0:	bf00      	nop
  }
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fa3d 	bl	8006064 <SWAPBYTE>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fa30 	bl	8006064 <SWAPBYTE>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f7ff fa23 	bl	8006064 <SWAPBYTE>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	461a      	mov	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	80da      	strh	r2, [r3, #6]
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c38:	2180      	movs	r1, #128	@ 0x80
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f986 	bl	8006f4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f982 	bl	8006f4c <USBD_LL_StallEP>
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f9ee 	bl	800705e <USBD_LL_Transmit>

  return USBD_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f9dd 	bl	800705e <USBD_LL_Transmit>

  return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 f9ed 	bl	80070a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9b9 	bl	800705e <USBD_LL_Transmit>

  return USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2205      	movs	r2, #5
 8006d02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d06:	2300      	movs	r3, #0
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9c7 	bl	80070a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fe fe67 	bl	8005a06 <USBD_LL_SetupStage>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4613      	mov	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7fe fea1 	bl	8005ab0 <USBD_LL_DataOutStage>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	3320      	adds	r3, #32
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f7fe ff43 	bl	8005c28 <USBD_LL_DataInStage>
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff f887 	bl	8005ecc <USBD_LL_SOF>
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	79db      	ldrb	r3, [r3, #7]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e008      	b.n	8006df2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	79db      	ldrb	r3, [r3, #7]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d102      	bne.n	8006dee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006de8:	2301      	movs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	e001      	b.n	8006df2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006dee:	f7fa f8cf 	bl	8000f90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7ff f821 	bl	8005e44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe ffc8 	bl	8005d9e <USBD_LL_Reset>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff f81c 	bl	8005e64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6812      	ldr	r2, [r2, #0]
 8006e3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e3e:	f043 0301 	orr.w	r3, r3, #1
 8006e42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7adb      	ldrb	r3, [r3, #11]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <HAL_PCD_SuspendCallback+0x48>)
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	4a03      	ldr	r2, [pc, #12]	@ (8006e60 <HAL_PCD_SuspendCallback+0x48>)
 8006e52:	f043 0306 	orr.w	r3, r3, #6
 8006e56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff f812 	bl	8005e9c <USBD_LL_Resume>
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff f86a 	bl	8005f70 <USBD_LL_IsoOUTIncomplete>
}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff f826 	bl	8005f0c <USBD_LL_IsoINIncomplete>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f87c 	bl	8005fd4 <USBD_LL_DevConnected>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff f879 	bl	8005fea <USBD_LL_DevDisconnected>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4603      	mov	r3, r0
 8006f10:	70fb      	strb	r3, [r7, #3]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70bb      	strb	r3, [r7, #2]
 8006f16:	4613      	mov	r3, r2
 8006f18:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006f28:	78bb      	ldrb	r3, [r7, #2]
 8006f2a:	883a      	ldrh	r2, [r7, #0]
 8006f2c:	78f9      	ldrb	r1, [r7, #3]
 8006f2e:	f7fc f97c 	bl	800322a <HAL_PCD_EP_Open>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f8d3 	bl	80070e4 <USBD_Get_USB_Status>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fc fa3c 	bl	80033e8 <HAL_PCD_EP_SetStall>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f8b4 	bl	80070e4 <USBD_Get_USB_Status>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fa4:	78fa      	ldrb	r2, [r7, #3]
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fc fa80 	bl	80034ae <HAL_PCD_EP_ClrStall>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f895 	bl	80070e4 <USBD_Get_USB_Status>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	da0b      	bge.n	8006ffc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	4613      	mov	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	3316      	adds	r3, #22
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	e00b      	b.n	8007014 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	4613      	mov	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007012:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	4611      	mov	r1, r2
 800703e:	4618      	mov	r0, r3
 8007040:	f7fc f8cf 	bl	80031e2 <HAL_PCD_SetAddress>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f84a 	bl	80070e4 <USBD_Get_USB_Status>
 8007050:	4603      	mov	r3, r0
 8007052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007054:	7bbb      	ldrb	r3, [r7, #14]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
 800706a:	460b      	mov	r3, r1
 800706c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800707c:	7af9      	ldrb	r1, [r7, #11]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	f7fc f977 	bl	8003374 <HAL_PCD_EP_Transmit>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 f829 	bl	80070e4 <USBD_Get_USB_Status>
 8007092:	4603      	mov	r3, r0
 8007094:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007096:	7dbb      	ldrb	r3, [r7, #22]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	607a      	str	r2, [r7, #4]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	460b      	mov	r3, r1
 80070ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80070be:	7af9      	ldrb	r1, [r7, #11]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	f7fc f91b 	bl	80032fe <HAL_PCD_EP_Receive>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 f808 	bl	80070e4 <USBD_Get_USB_Status>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
	...

080070e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d817      	bhi.n	8007128 <USBD_Get_USB_Status+0x44>
 80070f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <USBD_Get_USB_Status+0x1c>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007111 	.word	0x08007111
 8007104:	08007117 	.word	0x08007117
 8007108:	0800711d 	.word	0x0800711d
 800710c:	08007123 	.word	0x08007123
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
    break;
 8007114:	e00b      	b.n	800712e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	73fb      	strb	r3, [r7, #15]
    break;
 800711a:	e008      	b.n	800712e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
    break;
 8007120:	e005      	b.n	800712e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]
    break;
 8007126:	e002      	b.n	800712e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
    break;
 800712c:	bf00      	nop
  }
  return usb_status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <funchad34.constprop.0>:
 800713c:	b500      	push	{lr}
 800713e:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <funchad34.constprop.0+0x30>)
 8007140:	6842      	ldr	r2, [r0, #4]
 8007142:	f8d0 e000 	ldr.w	lr, [r0]
 8007146:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800714a:	4909      	ldr	r1, [pc, #36]	@ (8007170 <funchad34.constprop.0+0x34>)
 800714c:	605a      	str	r2, [r3, #4]
 800714e:	68c2      	ldr	r2, [r0, #12]
 8007150:	f8c3 c008 	str.w	ip, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800715a:	6942      	ldr	r2, [r0, #20]
 800715c:	f8c3 e000 	str.w	lr, [r3]
 8007160:	f8c3 c010 	str.w	ip, [r3, #16]
 8007164:	600a      	str	r2, [r1, #0]
 8007166:	615a      	str	r2, [r3, #20]
 8007168:	f85d fb04 	ldr.w	pc, [sp], #4
 800716c:	20000b18 	.word	0x20000b18
 8007170:	20000b14 	.word	0x20000b14
 8007174:	00000000 	.word	0x00000000

08007178 <neai_anomalydetection_learn>:
 8007178:	4bba      	ldr	r3, [pc, #744]	@ (8007464 <neai_anomalydetection_learn+0x2ec>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d003      	beq.n	8007188 <neai_anomalydetection_learn+0x10>
 8007180:	4bb9      	ldr	r3, [pc, #740]	@ (8007468 <neai_anomalydetection_learn+0x2f0>)
 8007182:	207b      	movs	r0, #123	@ 0x7b
 8007184:	7018      	strb	r0, [r3, #0]
 8007186:	4770      	bx	lr
 8007188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800718c:	ed2d 8b02 	vpush	{d8}
 8007190:	f7ff ffd4 	bl	800713c <funchad34.constprop.0>
 8007194:	4bb5      	ldr	r3, [pc, #724]	@ (800746c <neai_anomalydetection_learn+0x2f4>)
 8007196:	681f      	ldr	r7, [r3, #0]
 8007198:	f107 0801 	add.w	r8, r7, #1
 800719c:	f1b8 0f02 	cmp.w	r8, #2
 80071a0:	f8c3 8000 	str.w	r8, [r3]
 80071a4:	f200 811a 	bhi.w	80073dc <neai_anomalydetection_learn+0x264>
 80071a8:	4eb1      	ldr	r6, [pc, #708]	@ (8007470 <neai_anomalydetection_learn+0x2f8>)
 80071aa:	4db2      	ldr	r5, [pc, #712]	@ (8007474 <neai_anomalydetection_learn+0x2fc>)
 80071ac:	4cb2      	ldr	r4, [pc, #712]	@ (8007478 <neai_anomalydetection_learn+0x300>)
 80071ae:	ed95 5a00 	vldr	s10, [r5]
 80071b2:	edd4 7a00 	vldr	s15, [r4]
 80071b6:	ed96 7a00 	vldr	s14, [r6]
 80071ba:	edd5 4a01 	vldr	s9, [r5, #4]
 80071be:	4baa      	ldr	r3, [pc, #680]	@ (8007468 <neai_anomalydetection_learn+0x2f0>)
 80071c0:	3702      	adds	r7, #2
 80071c2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80071c6:	ee25 6a05 	vmul.f32	s12, s10, s10
 80071ca:	ee07 7a90 	vmov	s15, r7
 80071ce:	ee36 6a26 	vadd.f32	s12, s12, s13
 80071d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d6:	ee77 6a45 	vsub.f32	s13, s14, s10
 80071da:	ee27 7a07 	vmul.f32	s14, s14, s14
 80071de:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 80071e2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80071e6:	ee75 5a85 	vadd.f32	s11, s11, s10
 80071ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80071ee:	ee25 5aa5 	vmul.f32	s10, s11, s11
 80071f2:	ee36 7a86 	vadd.f32	s14, s13, s12
 80071f6:	edd4 6a01 	vldr	s13, [r4, #4]
 80071fa:	edc5 5a00 	vstr	s11, [r5]
 80071fe:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007202:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8007206:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720e:	bfa8      	it	ge
 8007210:	eeb1 4ac7 	vsqrtge.f32	s8, s14
 8007214:	ee24 5aa4 	vmul.f32	s10, s9, s9
 8007218:	ed96 7a01 	vldr	s14, [r6, #4]
 800721c:	bfb8      	it	lt
 800721e:	ed9f 4a97 	vldrlt	s8, [pc, #604]	@ 800747c <neai_anomalydetection_learn+0x304>
 8007222:	ee77 3a64 	vsub.f32	s7, s14, s9
 8007226:	ee35 5a26 	vadd.f32	s10, s10, s13
 800722a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800722e:	ee83 6aa7 	vdiv.f32	s12, s7, s15
 8007232:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007236:	ee36 6a24 	vadd.f32	s12, s12, s9
 800723a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800723e:	ee66 5a06 	vmul.f32	s11, s12, s12
 8007242:	ee36 7a85 	vadd.f32	s14, s13, s10
 8007246:	edd5 4a02 	vldr	s9, [r5, #8]
 800724a:	edd4 6a02 	vldr	s13, [r4, #8]
 800724e:	ed84 4a00 	vstr	s8, [r4]
 8007252:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007256:	ee24 5aa4 	vmul.f32	s10, s9, s9
 800725a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800725e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007262:	bfa8      	it	ge
 8007264:	eeb1 4ac7 	vsqrtge.f32	s8, s14
 8007268:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800726c:	ed96 7a02 	vldr	s14, [r6, #8]
 8007270:	ed85 6a01 	vstr	s12, [r5, #4]
 8007274:	ee77 3a64 	vsub.f32	s7, s14, s9
 8007278:	ee35 5a26 	vadd.f32	s10, s10, s13
 800727c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007280:	eec3 5aa7 	vdiv.f32	s11, s7, s15
 8007284:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007288:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800728c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007290:	ee25 6aa5 	vmul.f32	s12, s11, s11
 8007294:	ee36 7a85 	vadd.f32	s14, s13, s10
 8007298:	bfb8      	it	lt
 800729a:	ed9f 4a78 	vldrlt	s8, [pc, #480]	@ 800747c <neai_anomalydetection_learn+0x304>
 800729e:	edd5 4a03 	vldr	s9, [r5, #12]
 80072a2:	edd4 6a03 	vldr	s13, [r4, #12]
 80072a6:	ed84 4a01 	vstr	s8, [r4, #4]
 80072aa:	ee37 7a46 	vsub.f32	s14, s14, s12
 80072ae:	ee24 5aa4 	vmul.f32	s10, s9, s9
 80072b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	bfa8      	it	ge
 80072bc:	eeb1 4ac7 	vsqrtge.f32	s8, s14
 80072c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80072c4:	ed96 7a03 	vldr	s14, [r6, #12]
 80072c8:	edc5 5a02 	vstr	s11, [r5, #8]
 80072cc:	ee77 3a64 	vsub.f32	s7, s14, s9
 80072d0:	ee35 5a26 	vadd.f32	s10, s10, s13
 80072d4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80072d8:	ee83 6aa7 	vdiv.f32	s12, s7, s15
 80072dc:	ee37 7a45 	vsub.f32	s14, s14, s10
 80072e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80072e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80072e8:	ee66 5a06 	vmul.f32	s11, s12, s12
 80072ec:	ee36 7a85 	vadd.f32	s14, s13, s10
 80072f0:	edd5 4a04 	vldr	s9, [r5, #16]
 80072f4:	bfb8      	it	lt
 80072f6:	ed9f 4a61 	vldrlt	s8, [pc, #388]	@ 800747c <neai_anomalydetection_learn+0x304>
 80072fa:	edd4 6a04 	vldr	s13, [r4, #16]
 80072fe:	ed84 4a02 	vstr	s8, [r4, #8]
 8007302:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007306:	ee24 5aa4 	vmul.f32	s10, s9, s9
 800730a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	bfa8      	it	ge
 8007314:	eeb1 4ac7 	vsqrtge.f32	s8, s14
 8007318:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800731c:	ed96 7a04 	vldr	s14, [r6, #16]
 8007320:	ed85 6a03 	vstr	s12, [r5, #12]
 8007324:	ee77 3a64 	vsub.f32	s7, s14, s9
 8007328:	ee35 5a26 	vadd.f32	s10, s10, s13
 800732c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007330:	eec3 5aa7 	vdiv.f32	s11, s7, s15
 8007334:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007338:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800733c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007340:	ee25 6aa5 	vmul.f32	s12, s11, s11
 8007344:	ee36 7a85 	vadd.f32	s14, s13, s10
 8007348:	bfb8      	it	lt
 800734a:	ed9f 4a4c 	vldrlt	s8, [pc, #304]	@ 800747c <neai_anomalydetection_learn+0x304>
 800734e:	ed95 5a05 	vldr	s10, [r5, #20]
 8007352:	edd6 6a05 	vldr	s13, [r6, #20]
 8007356:	ed84 4a03 	vstr	s8, [r4, #12]
 800735a:	ee37 7a46 	vsub.f32	s14, s14, s12
 800735e:	ee25 6a05 	vmul.f32	s12, s10, s10
 8007362:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800736a:	bfa8      	it	ge
 800736c:	eef1 4ac7 	vsqrtge.f32	s9, s14
 8007370:	ed94 7a05 	vldr	s14, [r4, #20]
 8007374:	edc5 5a04 	vstr	s11, [r5, #16]
 8007378:	ee27 7a07 	vmul.f32	s14, s14, s14
 800737c:	ee36 4ac5 	vsub.f32	s8, s13, s10
 8007380:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007384:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8007388:	ee84 6a27 	vdiv.f32	s12, s8, s15
 800738c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8007390:	bfb8      	it	lt
 8007392:	eddf 4a3a 	vldrlt	s9, [pc, #232]	@ 800747c <neai_anomalydetection_learn+0x304>
 8007396:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 800739a:	ee76 7a05 	vadd.f32	s15, s12, s10
 800739e:	ee37 7a25 	vadd.f32	s14, s14, s11
 80073a2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80073a6:	edc4 4a04 	vstr	s9, [r4, #16]
 80073aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80073ae:	edc5 7a05 	vstr	s15, [r5, #20]
 80073b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80073b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ba:	bfac      	ite	ge
 80073bc:	eef1 6ac7 	vsqrtge.f32	s13, s14
 80073c0:	eddf 6a2e 	vldrlt	s13, [pc, #184]	@ 800747c <neai_anomalydetection_learn+0x304>
 80073c4:	f1b8 0f09 	cmp.w	r8, #9
 80073c8:	bf8c      	ite	hi
 80073ca:	207f      	movhi	r0, #127	@ 0x7f
 80073cc:	207e      	movls	r0, #126	@ 0x7e
 80073ce:	7018      	strb	r0, [r3, #0]
 80073d0:	ecbd 8b02 	vpop	{d8}
 80073d4:	edc4 6a05 	vstr	s13, [r4, #20]
 80073d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073dc:	4c26      	ldr	r4, [pc, #152]	@ (8007478 <neai_anomalydetection_learn+0x300>)
 80073de:	4e24      	ldr	r6, [pc, #144]	@ (8007470 <neai_anomalydetection_learn+0x2f8>)
 80073e0:	edd4 6a00 	vldr	s13, [r4]
 80073e4:	4d23      	ldr	r5, [pc, #140]	@ (8007474 <neai_anomalydetection_learn+0x2fc>)
 80073e6:	ed96 7a00 	vldr	s14, [r6]
 80073ea:	edd5 7a00 	vldr	s15, [r5]
 80073ee:	eef5 6a40 	vcmp.f32	s13, #0.0
 80073f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f6:	d045      	beq.n	8007484 <neai_anomalydetection_learn+0x30c>
 80073f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	f100 8165 	bmi.w	80076d2 <neai_anomalydetection_learn+0x55a>
 8007408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800740c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800747c <neai_anomalydetection_learn+0x304>
 8007410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	f300 816d 	bgt.w	80076f6 <neai_anomalydetection_learn+0x57e>
 800741c:	edd4 5a01 	vldr	s11, [r4, #4]
 8007420:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007428:	ee77 6a87 	vadd.f32	s13, s15, s14
 800742c:	f040 814a 	bne.w	80076c4 <neai_anomalydetection_learn+0x54c>
 8007430:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007480 <neai_anomalydetection_learn+0x308>
 8007434:	edd4 5a02 	vldr	s11, [r4, #8]
 8007438:	ee77 7a66 	vsub.f32	s15, s14, s13
 800743c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007440:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007444:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007450:	f000 814e 	beq.w	80076f0 <neai_anomalydetection_learn+0x578>
 8007454:	ed96 6a02 	vldr	s12, [r6, #8]
 8007458:	ed95 5a02 	vldr	s10, [r5, #8]
 800745c:	eef0 7a47 	vmov.f32	s15, s14
 8007460:	e032      	b.n	80074c8 <neai_anomalydetection_learn+0x350>
 8007462:	bf00      	nop
 8007464:	20000068 	.word	0x20000068
 8007468:	20000060 	.word	0x20000060
 800746c:	20000064 	.word	0x20000064
 8007470:	20000b18 	.word	0x20000b18
 8007474:	2000008c 	.word	0x2000008c
 8007478:	200000a4 	.word	0x200000a4
 800747c:	00000000 	.word	0x00000000
 8007480:	42c80000 	.word	0x42c80000
 8007484:	edd4 5a01 	vldr	s11, [r4, #4]
 8007488:	eef5 5a40 	vcmp.f32	s11, #0.0
 800748c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007490:	f040 80fd 	bne.w	800768e <neai_anomalydetection_learn+0x516>
 8007494:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8007480 <neai_anomalydetection_learn+0x308>
 8007498:	eef0 6a47 	vmov.f32	s13, s14
 800749c:	eef0 7a47 	vmov.f32	s15, s14
 80074a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074a4:	edd4 5a02 	vldr	s11, [r4, #8]
 80074a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80074ac:	ee27 7a06 	vmul.f32	s14, s14, s12
 80074b0:	eef5 5a40 	vcmp.f32	s11, #0.0
 80074b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b8:	ee77 6a26 	vadd.f32	s13, s14, s13
 80074bc:	f000 8115 	beq.w	80076ea <neai_anomalydetection_learn+0x572>
 80074c0:	ed96 6a02 	vldr	s12, [r6, #8]
 80074c4:	ed95 5a02 	vldr	s10, [r5, #8]
 80074c8:	ee36 6a45 	vsub.f32	s12, s12, s10
 80074cc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	d501      	bpl.n	80074da <neai_anomalydetection_learn+0x362>
 80074d6:	eeb1 6a46 	vneg.f32	s12, s12
 80074da:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80074de:	eeb4 7a67 	vcmp.f32	s14, s15
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	bfc8      	it	gt
 80074e8:	eef0 7a47 	vmovgt.f32	s15, s14
 80074ec:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074f0:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 80074f4:	ee87 6a25 	vdiv.f32	s12, s14, s11
 80074f8:	edd4 5a03 	vldr	s11, [r4, #12]
 80074fc:	ed96 7a03 	vldr	s14, [r6, #12]
 8007500:	ed95 5a03 	vldr	s10, [r5, #12]
 8007504:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007510:	f000 80e5 	beq.w	80076de <neai_anomalydetection_learn+0x566>
 8007514:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007518:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800751c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007520:	d501      	bpl.n	8007526 <neai_anomalydetection_learn+0x3ae>
 8007522:	eeb1 7a47 	vneg.f32	s14, s14
 8007526:	ee87 6a25 	vdiv.f32	s12, s14, s11
 800752a:	ee36 7a66 	vsub.f32	s14, s12, s13
 800752e:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 8007532:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007536:	edd4 5a04 	vldr	s11, [r4, #16]
 800753a:	eef4 7a46 	vcmp.f32	s15, s12
 800753e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007542:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007546:	bf48      	it	mi
 8007548:	eef0 7a46 	vmovmi.f32	s15, s12
 800754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007550:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007554:	ed95 6a04 	vldr	s12, [r5, #16]
 8007558:	edd6 6a04 	vldr	s13, [r6, #16]
 800755c:	f000 80bc 	beq.w	80076d8 <neai_anomalydetection_learn+0x560>
 8007560:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007564:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8007568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756c:	d501      	bpl.n	8007572 <neai_anomalydetection_learn+0x3fa>
 800756e:	eef1 6a66 	vneg.f32	s13, s13
 8007572:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 8007576:	ee36 5a47 	vsub.f32	s10, s12, s14
 800757a:	eef1 5a04 	vmov.f32	s11, #20	@ 0x40a00000  5.0
 800757e:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8007582:	edd4 5a05 	vldr	s11, [r4, #20]
 8007586:	ed95 5a05 	vldr	s10, [r5, #20]
 800758a:	eef4 7a46 	vcmp.f32	s15, s12
 800758e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007592:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007596:	bf48      	it	mi
 8007598:	eef0 7a46 	vmovmi.f32	s15, s12
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	ed96 6a05 	vldr	s12, [r6, #20]
 80075a4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80075a8:	f000 809c 	beq.w	80076e4 <neai_anomalydetection_learn+0x56c>
 80075ac:	ee36 7a45 	vsub.f32	s14, s12, s10
 80075b0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80075b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b8:	bf48      	it	mi
 80075ba:	eeb1 7a47 	vnegmi.f32	s14, s14
 80075be:	ee87 6a25 	vdiv.f32	s12, s14, s11
 80075c2:	4859      	ldr	r0, [pc, #356]	@ (8007728 <neai_anomalydetection_learn+0x5b0>)
 80075c4:	4959      	ldr	r1, [pc, #356]	@ (800772c <neai_anomalydetection_learn+0x5b4>)
 80075c6:	6803      	ldr	r3, [r0, #0]
 80075c8:	4a59      	ldr	r2, [pc, #356]	@ (8007730 <neai_anomalydetection_learn+0x5b8>)
 80075ca:	3301      	adds	r3, #1
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	ee36 5a66 	vsub.f32	s10, s12, s13
 80075d2:	eef1 5a08 	vmov.f32	s11, #24	@ 0x40c00000  6.0
 80075d6:	ee85 7a25 	vdiv.f32	s14, s10, s11
 80075da:	eeb4 6a67 	vcmp.f32	s12, s15
 80075de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e2:	edd1 5a00 	vldr	s11, [r1]
 80075e6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80075ea:	bfc8      	it	gt
 80075ec:	eef0 7a46 	vmovgt.f32	s15, s12
 80075f0:	ee06 3a90 	vmov	s13, r3
 80075f4:	ed92 6a00 	vldr	s12, [r2]
 80075f8:	eeb8 5a66 	vcvt.f32.u32	s10, s13
 80075fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007600:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007604:	ee87 8a85 	vdiv.f32	s16, s15, s10
 8007608:	eec7 6a05 	vdiv.f32	s13, s14, s10
 800760c:	ee38 8a06 	vadd.f32	s16, s16, s12
 8007610:	ee76 7aa5 	vadd.f32	s15, s13, s11
 8007614:	ed82 8a00 	vstr	s16, [r2]
 8007618:	edc1 7a00 	vstr	s15, [r1]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f43f adc6 	beq.w	80071ae <neai_anomalydetection_learn+0x36>
 8007622:	4b44      	ldr	r3, [pc, #272]	@ (8007734 <neai_anomalydetection_learn+0x5bc>)
 8007624:	edd3 8a00 	vldr	s17, [r3]
 8007628:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800762c:	ee17 0a90 	vmov	r0, s15
 8007630:	f7f8 ff8a 	bl	8000548 <__aeabi_f2d>
 8007634:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8007718 <neai_anomalydetection_learn+0x5a0>
 8007638:	ec41 0b10 	vmov	d0, r0, r1
 800763c:	f000 ff9e 	bl	800857c <fmax>
 8007640:	ec51 0b10 	vmov	r0, r1, d0
 8007644:	f7f9 f860 	bl	8000708 <__aeabi_d2f>
 8007648:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800764c:	ee00 0a10 	vmov	s0, r0
 8007650:	f000 ffe2 	bl	8008618 <fminf>
 8007654:	4b38      	ldr	r3, [pc, #224]	@ (8007738 <neai_anomalydetection_learn+0x5c0>)
 8007656:	ee68 7a28 	vmul.f32	s15, s16, s17
 800765a:	ed83 0a00 	vstr	s0, [r3]
 800765e:	ee17 0a90 	vmov	r0, s15
 8007662:	f7f8 ff71 	bl	8000548 <__aeabi_f2d>
 8007666:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8007720 <neai_anomalydetection_learn+0x5a8>
 800766a:	ec41 0b10 	vmov	d0, r0, r1
 800766e:	f000 ff85 	bl	800857c <fmax>
 8007672:	ec51 0b10 	vmov	r0, r1, d0
 8007676:	f7f9 f847 	bl	8000708 <__aeabi_d2f>
 800767a:	eddf 0a30 	vldr	s1, [pc, #192]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 800767e:	ee00 0a10 	vmov	s0, r0
 8007682:	f000 ffc9 	bl	8008618 <fminf>
 8007686:	4b2e      	ldr	r3, [pc, #184]	@ (8007740 <neai_anomalydetection_learn+0x5c8>)
 8007688:	ed83 0a00 	vstr	s0, [r3]
 800768c:	e58f      	b.n	80071ae <neai_anomalydetection_learn+0x36>
 800768e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 8007692:	ed96 6a01 	vldr	s12, [r6, #4]
 8007696:	ed95 5a01 	vldr	s10, [r5, #4]
 800769a:	eef0 7a66 	vmov.f32	s15, s13
 800769e:	ee36 6a45 	vsub.f32	s12, s12, s10
 80076a2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80076a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076aa:	d501      	bpl.n	80076b0 <neai_anomalydetection_learn+0x538>
 80076ac:	eeb1 6a46 	vneg.f32	s12, s12
 80076b0:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80076b4:	eef4 7a47 	vcmp.f32	s15, s14
 80076b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076bc:	bf48      	it	mi
 80076be:	eef0 7a47 	vmovmi.f32	s15, s14
 80076c2:	e6ed      	b.n	80074a0 <neai_anomalydetection_learn+0x328>
 80076c4:	ed96 6a01 	vldr	s12, [r6, #4]
 80076c8:	ed95 5a01 	vldr	s10, [r5, #4]
 80076cc:	eef0 7a47 	vmov.f32	s15, s14
 80076d0:	e7e5      	b.n	800769e <neai_anomalydetection_learn+0x526>
 80076d2:	eeb1 7a47 	vneg.f32	s14, s14
 80076d6:	e697      	b.n	8007408 <neai_anomalydetection_learn+0x290>
 80076d8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 80076dc:	e74b      	b.n	8007576 <neai_anomalydetection_learn+0x3fe>
 80076de:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 80076e2:	e722      	b.n	800752a <neai_anomalydetection_learn+0x3b2>
 80076e4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 80076e8:	e76b      	b.n	80075c2 <neai_anomalydetection_learn+0x44a>
 80076ea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 80076ee:	e6f6      	b.n	80074de <neai_anomalydetection_learn+0x366>
 80076f0:	eef0 7a47 	vmov.f32	s15, s14
 80076f4:	e6fa      	b.n	80074ec <neai_anomalydetection_learn+0x374>
 80076f6:	edd4 5a01 	vldr	s11, [r4, #4]
 80076fa:	ed96 6a01 	vldr	s12, [r6, #4]
 80076fe:	ed95 5a01 	vldr	s10, [r5, #4]
 8007702:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800770e:	d1c6      	bne.n	800769e <neai_anomalydetection_learn+0x526>
 8007710:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800773c <neai_anomalydetection_learn+0x5c4>
 8007714:	e7ce      	b.n	80076b4 <neai_anomalydetection_learn+0x53c>
 8007716:	bf00      	nop
 8007718:	00000000 	.word	0x00000000
 800771c:	3ff00000 	.word	0x3ff00000
 8007720:	00000000 	.word	0x00000000
 8007724:	40080000 	.word	0x40080000
 8007728:	2000006c 	.word	0x2000006c
 800772c:	20000074 	.word	0x20000074
 8007730:	20000070 	.word	0x20000070
 8007734:	20000080 	.word	0x20000080
 8007738:	20000088 	.word	0x20000088
 800773c:	42c80000 	.word	0x42c80000
 8007740:	20000084 	.word	0x20000084
 8007744:	00000000 	.word	0x00000000

08007748 <neai_anomalydetection_detect>:
 8007748:	b510      	push	{r4, lr}
 800774a:	ed2d 8b06 	vpush	{d8-d10}
 800774e:	4adc      	ldr	r2, [pc, #880]	@ (8007ac0 <neai_anomalydetection_detect+0x378>)
 8007750:	460c      	mov	r4, r1
 8007752:	7813      	ldrb	r3, [r2, #0]
 8007754:	21ff      	movs	r1, #255	@ 0xff
 8007756:	7021      	strb	r1, [r4, #0]
 8007758:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800775c:	2901      	cmp	r1, #1
 800775e:	d955      	bls.n	800780c <neai_anomalydetection_detect+0xc4>
 8007760:	2b80      	cmp	r3, #128	@ 0x80
 8007762:	d053      	beq.n	800780c <neai_anomalydetection_detect+0xc4>
 8007764:	4bd7      	ldr	r3, [pc, #860]	@ (8007ac4 <neai_anomalydetection_detect+0x37c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b09      	cmp	r3, #9
 800776a:	d94d      	bls.n	8007808 <neai_anomalydetection_detect+0xc0>
 800776c:	f7ff fce6 	bl	800713c <funchad34.constprop.0>
 8007770:	4bd5      	ldr	r3, [pc, #852]	@ (8007ac8 <neai_anomalydetection_detect+0x380>)
 8007772:	eddf 7ad6 	vldr	s15, [pc, #856]	@ 8007acc <neai_anomalydetection_detect+0x384>
 8007776:	ed93 8a00 	vldr	s16, [r3]
 800777a:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 800777e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8007782:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	da43      	bge.n	8007814 <neai_anomalydetection_detect+0xcc>
 800778c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	4bce      	ldr	r3, [pc, #824]	@ (8007ad0 <neai_anomalydetection_detect+0x388>)
 8007796:	dd75      	ble.n	8007884 <neai_anomalydetection_detect+0x13c>
 8007798:	eddf 9ace 	vldr	s19, [pc, #824]	@ 8007ad4 <neai_anomalydetection_detect+0x38c>
 800779c:	edc3 7a00 	vstr	s15, [r3]
 80077a0:	eeb0 8a67 	vmov.f32	s16, s15
 80077a4:	4bcc      	ldr	r3, [pc, #816]	@ (8007ad8 <neai_anomalydetection_detect+0x390>)
 80077a6:	49cd      	ldr	r1, [pc, #820]	@ (8007adc <neai_anomalydetection_detect+0x394>)
 80077a8:	edd3 6a00 	vldr	s13, [r3]
 80077ac:	4acc      	ldr	r2, [pc, #816]	@ (8007ae0 <neai_anomalydetection_detect+0x398>)
 80077ae:	ed91 7a00 	vldr	s14, [r1]
 80077b2:	edd2 7a00 	vldr	s15, [r2]
 80077b6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80077ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077be:	d038      	beq.n	8007832 <neai_anomalydetection_detect+0xea>
 80077c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80077c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	d501      	bpl.n	80077d2 <neai_anomalydetection_detect+0x8a>
 80077ce:	eeb1 7a47 	vneg.f32	s14, s14
 80077d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077d6:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8007ae4 <neai_anomalydetection_detect+0x39c>
 80077da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	f300 818d 	bgt.w	8007b00 <neai_anomalydetection_detect+0x3b8>
 80077e6:	edd3 5a01 	vldr	s11, [r3, #4]
 80077ea:	eef5 5a40 	vcmp.f32	s11, #0.0
 80077ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80077f6:	f000 814f 	beq.w	8007a98 <neai_anomalydetection_detect+0x350>
 80077fa:	ed91 6a01 	vldr	s12, [r1, #4]
 80077fe:	ed92 5a01 	vldr	s10, [r2, #4]
 8007802:	eef0 7a47 	vmov.f32	s15, s14
 8007806:	e023      	b.n	8007850 <neai_anomalydetection_detect+0x108>
 8007808:	237e      	movs	r3, #126	@ 0x7e
 800780a:	7013      	strb	r3, [r2, #0]
 800780c:	ecbd 8b06 	vpop	{d8-d10}
 8007810:	4618      	mov	r0, r3
 8007812:	bd10      	pop	{r4, pc}
 8007814:	eddf 7ab9 	vldr	s15, [pc, #740]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007818:	4bad      	ldr	r3, [pc, #692]	@ (8007ad0 <neai_anomalydetection_detect+0x388>)
 800781a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007822:	d928      	bls.n	8007876 <neai_anomalydetection_detect+0x12e>
 8007824:	eddf 9ab0 	vldr	s19, [pc, #704]	@ 8007ae8 <neai_anomalydetection_detect+0x3a0>
 8007828:	edc3 7a00 	vstr	s15, [r3]
 800782c:	eeb0 8a67 	vmov.f32	s16, s15
 8007830:	e7b8      	b.n	80077a4 <neai_anomalydetection_detect+0x5c>
 8007832:	edd3 5a01 	vldr	s11, [r3, #4]
 8007836:	eef5 5a40 	vcmp.f32	s11, #0.0
 800783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783e:	d028      	beq.n	8007892 <neai_anomalydetection_detect+0x14a>
 8007840:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007844:	ed91 6a01 	vldr	s12, [r1, #4]
 8007848:	ed92 5a01 	vldr	s10, [r2, #4]
 800784c:	eef0 6a67 	vmov.f32	s13, s15
 8007850:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007854:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8007858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785c:	d501      	bpl.n	8007862 <neai_anomalydetection_detect+0x11a>
 800785e:	eeb1 6a46 	vneg.f32	s12, s12
 8007862:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8007866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800786a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786e:	d516      	bpl.n	800789e <neai_anomalydetection_detect+0x156>
 8007870:	eef0 7a47 	vmov.f32	s15, s14
 8007874:	e013      	b.n	800789e <neai_anomalydetection_detect+0x156>
 8007876:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 800787a:	ee68 9a29 	vmul.f32	s19, s16, s19
 800787e:	ed83 8a00 	vstr	s16, [r3]
 8007882:	e78f      	b.n	80077a4 <neai_anomalydetection_detect+0x5c>
 8007884:	ed93 8a00 	vldr	s16, [r3]
 8007888:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 800788c:	ee68 9a29 	vmul.f32	s19, s16, s19
 8007890:	e788      	b.n	80077a4 <neai_anomalydetection_detect+0x5c>
 8007892:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007896:	eeb0 7a66 	vmov.f32	s14, s13
 800789a:	eef0 7a66 	vmov.f32	s15, s13
 800789e:	ee37 7a66 	vsub.f32	s14, s14, s13
 80078a2:	edd3 5a02 	vldr	s11, [r3, #8]
 80078a6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80078aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80078ae:	eef5 5a40 	vcmp.f32	s11, #0.0
 80078b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80078ba:	ed92 6a02 	vldr	s12, [r2, #8]
 80078be:	edd1 6a02 	vldr	s13, [r1, #8]
 80078c2:	f000 80f2 	beq.w	8007aaa <neai_anomalydetection_detect+0x362>
 80078c6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80078ca:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80078ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d2:	d501      	bpl.n	80078d8 <neai_anomalydetection_detect+0x190>
 80078d4:	eef1 6a66 	vneg.f32	s13, s13
 80078d8:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 80078dc:	ee36 5a47 	vsub.f32	s10, s12, s14
 80078e0:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 80078e4:	eec5 6a25 	vdiv.f32	s13, s10, s11
 80078e8:	edd3 5a03 	vldr	s11, [r3, #12]
 80078ec:	ed92 5a03 	vldr	s10, [r2, #12]
 80078f0:	eeb4 6a67 	vcmp.f32	s12, s15
 80078f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80078fc:	bfc8      	it	gt
 80078fe:	eef0 7a46 	vmovgt.f32	s15, s12
 8007902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007906:	ed91 6a03 	vldr	s12, [r1, #12]
 800790a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800790e:	f000 80c9 	beq.w	8007aa4 <neai_anomalydetection_detect+0x35c>
 8007912:	ee36 7a45 	vsub.f32	s14, s12, s10
 8007916:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d501      	bpl.n	8007924 <neai_anomalydetection_detect+0x1dc>
 8007920:	eeb1 7a47 	vneg.f32	s14, s14
 8007924:	ee87 6a25 	vdiv.f32	s12, s14, s11
 8007928:	ee36 7a66 	vsub.f32	s14, s12, s13
 800792c:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 8007930:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007934:	edd3 5a04 	vldr	s11, [r3, #16]
 8007938:	eeb4 6a67 	vcmp.f32	s12, s15
 800793c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007940:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007944:	bfc8      	it	gt
 8007946:	eef0 7a46 	vmovgt.f32	s15, s12
 800794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007952:	ed91 6a04 	vldr	s12, [r1, #16]
 8007956:	edd2 6a04 	vldr	s13, [r2, #16]
 800795a:	f000 80a9 	beq.w	8007ab0 <neai_anomalydetection_detect+0x368>
 800795e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007962:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8007966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800796a:	d501      	bpl.n	8007970 <neai_anomalydetection_detect+0x228>
 800796c:	eeb1 6a46 	vneg.f32	s12, s12
 8007970:	eec6 6a25 	vdiv.f32	s13, s12, s11
 8007974:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8007978:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 800797c:	ee85 9a86 	vdiv.f32	s18, s11, s12
 8007980:	ed93 6a05 	vldr	s12, [r3, #20]
 8007984:	edd2 5a05 	vldr	s11, [r2, #20]
 8007988:	eef4 6a67 	vcmp.f32	s13, s15
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007994:	bfc8      	it	gt
 8007996:	eef0 7a66 	vmovgt.f32	s15, s13
 800799a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800799e:	edd1 6a05 	vldr	s13, [r1, #20]
 80079a2:	ee39 9a07 	vadd.f32	s18, s18, s14
 80079a6:	d07a      	beq.n	8007a9e <neai_anomalydetection_detect+0x356>
 80079a8:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80079ac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80079b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b4:	bf48      	it	mi
 80079b6:	eeb1 7a47 	vnegmi.f32	s14, s14
 80079ba:	eec7 8a06 	vdiv.f32	s17, s14, s12
 80079be:	4b4b      	ldr	r3, [pc, #300]	@ (8007aec <neai_anomalydetection_detect+0x3a4>)
 80079c0:	eef4 7a68 	vcmp.f32	s15, s17
 80079c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c8:	bf48      	it	mi
 80079ca:	eef0 7a68 	vmovmi.f32	s15, s17
 80079ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 80079d2:	edd3 6a00 	vldr	s13, [r3]
 80079d6:	4b46      	ldr	r3, [pc, #280]	@ (8007af0 <neai_anomalydetection_detect+0x3a8>)
 80079d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80079dc:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 80079e0:	ee77 7a4a 	vsub.f32	s15, s14, s20
 80079e4:	edd3 6a00 	vldr	s13, [r3]
 80079e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80079ec:	ee78 8ac9 	vsub.f32	s17, s17, s18
 80079f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80079f4:	ee17 0a90 	vmov	r0, s15
 80079f8:	f7f8 fda6 	bl	8000548 <__aeabi_f2d>
 80079fc:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8007ab8 <neai_anomalydetection_detect+0x370>
 8007a00:	ec41 0b10 	vmov	d0, r0, r1
 8007a04:	f000 fdba 	bl	800857c <fmax>
 8007a08:	ec51 0b10 	vmov	r0, r1, d0
 8007a0c:	f7f8 fe7c 	bl	8000708 <__aeabi_d2f>
 8007a10:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8007a14:	ee00 0a10 	vmov	s0, r0
 8007a18:	f000 fdfe 	bl	8008618 <fminf>
 8007a1c:	eef1 7a08 	vmov.f32	s15, #24	@ 0x40c00000  6.0
 8007a20:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8007a24:	4b33      	ldr	r3, [pc, #204]	@ (8007af4 <neai_anomalydetection_detect+0x3ac>)
 8007a26:	ed93 6a00 	vldr	s12, [r3]
 8007a2a:	4b33      	ldr	r3, [pc, #204]	@ (8007af8 <neai_anomalydetection_detect+0x3b0>)
 8007a2c:	ee37 7a09 	vadd.f32	s14, s14, s18
 8007a30:	edd3 6a00 	vldr	s13, [r3]
 8007a34:	ee27 7a08 	vmul.f32	s14, s14, s16
 8007a38:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8007a3c:	ee77 7aca 	vsub.f32	s15, s15, s20
 8007a40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007a44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a48:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007a4c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8007a50:	ee17 0a90 	vmov	r0, s15
 8007a54:	f7f8 fd78 	bl	8000548 <__aeabi_f2d>
 8007a58:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8007ab8 <neai_anomalydetection_detect+0x370>
 8007a5c:	ec41 0b10 	vmov	d0, r0, r1
 8007a60:	f000 fd8c 	bl	800857c <fmax>
 8007a64:	ec51 0b10 	vmov	r0, r1, d0
 8007a68:	f7f8 fe4e 	bl	8000708 <__aeabi_d2f>
 8007a6c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8007a70:	ee00 0a10 	vmov	s0, r0
 8007a74:	f000 fdd0 	bl	8008618 <fminf>
 8007a78:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8007a7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007a80:	2300      	movs	r3, #0
 8007a82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007a86:	4618      	mov	r0, r3
 8007a88:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8007a8c:	ee17 2a90 	vmov	r2, s15
 8007a90:	7022      	strb	r2, [r4, #0]
 8007a92:	ecbd 8b06 	vpop	{d8-d10}
 8007a96:	bd10      	pop	{r4, pc}
 8007a98:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007a9c:	e6e8      	b.n	8007870 <neai_anomalydetection_detect+0x128>
 8007a9e:	eddf 8a17 	vldr	s17, [pc, #92]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007aa2:	e78c      	b.n	80079be <neai_anomalydetection_detect+0x276>
 8007aa4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007aa8:	e73e      	b.n	8007928 <neai_anomalydetection_detect+0x1e0>
 8007aaa:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007aae:	e715      	b.n	80078dc <neai_anomalydetection_detect+0x194>
 8007ab0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007ab4:	e75e      	b.n	8007974 <neai_anomalydetection_detect+0x22c>
 8007ab6:	bf00      	nop
	...
 8007ac0:	20000060 	.word	0x20000060
 8007ac4:	20000064 	.word	0x20000064
 8007ac8:	2000000c 	.word	0x2000000c
 8007acc:	3c23d70a 	.word	0x3c23d70a
 8007ad0:	20000b30 	.word	0x20000b30
 8007ad4:	3c75c28f 	.word	0x3c75c28f
 8007ad8:	200000a4 	.word	0x200000a4
 8007adc:	20000b18 	.word	0x20000b18
 8007ae0:	2000008c 	.word	0x2000008c
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	43160000 	.word	0x43160000
 8007aec:	20000084 	.word	0x20000084
 8007af0:	20000078 	.word	0x20000078
 8007af4:	20000088 	.word	0x20000088
 8007af8:	2000007c 	.word	0x2000007c
 8007afc:	42c80000 	.word	0x42c80000
 8007b00:	edd3 5a01 	vldr	s11, [r3, #4]
 8007b04:	eef5 5a40 	vcmp.f32	s11, #0.0
 8007b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007b10:	d004      	beq.n	8007b1c <neai_anomalydetection_detect+0x3d4>
 8007b12:	ed91 6a01 	vldr	s12, [r1, #4]
 8007b16:	ed92 5a01 	vldr	s10, [r2, #4]
 8007b1a:	e699      	b.n	8007850 <neai_anomalydetection_detect+0x108>
 8007b1c:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8007afc <neai_anomalydetection_detect+0x3b4>
 8007b20:	e6a1      	b.n	8007866 <neai_anomalydetection_detect+0x11e>
 8007b22:	bf00      	nop

08007b24 <_fminf>:
 8007b24:	f000 bd78 	b.w	8008618 <fminf>

08007b28 <neai_anomalydetection_init>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4c24      	ldr	r4, [pc, #144]	@ (8007bbc <neai_anomalydetection_init+0x94>)
 8007b2c:	4924      	ldr	r1, [pc, #144]	@ (8007bc0 <neai_anomalydetection_init+0x98>)
 8007b2e:	4a25      	ldr	r2, [pc, #148]	@ (8007bc4 <neai_anomalydetection_init+0x9c>)
 8007b30:	4d25      	ldr	r5, [pc, #148]	@ (8007bc8 <neai_anomalydetection_init+0xa0>)
 8007b32:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8007bcc <neai_anomalydetection_init+0xa4>
 8007b36:	2000      	movs	r0, #0
 8007b38:	ed2d 8b02 	vpush	{d8}
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6020      	str	r0, [r4, #0]
 8007b40:	4c23      	ldr	r4, [pc, #140]	@ (8007bd0 <neai_anomalydetection_init+0xa8>)
 8007b42:	ed9f 8a24 	vldr	s16, [pc, #144]	@ 8007bd4 <neai_anomalydetection_init+0xac>
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	e9c2 3300 	strd	r3, r3, [r2]
 8007b4c:	e9c1 3300 	strd	r3, r3, [r1]
 8007b50:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8007b54:	e9c1 3304 	strd	r3, r3, [r1, #16]
 8007b58:	e9c2 3302 	strd	r3, r3, [r2, #8]
 8007b5c:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8007b60:	491d      	ldr	r1, [pc, #116]	@ (8007bd8 <neai_anomalydetection_init+0xb0>)
 8007b62:	4a1e      	ldr	r2, [pc, #120]	@ (8007bdc <neai_anomalydetection_init+0xb4>)
 8007b64:	f04f 5c7e 	mov.w	ip, #1065353216	@ 0x3f800000
 8007b68:	f8c4 c000 	str.w	ip, [r4]
 8007b6c:	4c1c      	ldr	r4, [pc, #112]	@ (8007be0 <neai_anomalydetection_init+0xb8>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	600c      	str	r4, [r1, #0]
 8007b72:	4a1c      	ldr	r2, [pc, #112]	@ (8007be4 <neai_anomalydetection_init+0xbc>)
 8007b74:	4c1c      	ldr	r4, [pc, #112]	@ (8007be8 <neai_anomalydetection_init+0xc0>)
 8007b76:	491d      	ldr	r1, [pc, #116]	@ (8007bec <neai_anomalydetection_init+0xc4>)
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	f04f 5c7d 	mov.w	ip, #1061158912	@ 0x3f400000
 8007b7e:	f8c4 c000 	str.w	ip, [r4]
 8007b82:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf0 <neai_anomalydetection_init+0xc8>)
 8007b84:	4c1b      	ldr	r4, [pc, #108]	@ (8007bf4 <neai_anomalydetection_init+0xcc>)
 8007b86:	491c      	ldr	r1, [pc, #112]	@ (8007bf8 <neai_anomalydetection_init+0xd0>)
 8007b88:	6020      	str	r0, [r4, #0]
 8007b8a:	6011      	str	r1, [r2, #0]
 8007b8c:	4c1b      	ldr	r4, [pc, #108]	@ (8007bfc <neai_anomalydetection_init+0xd4>)
 8007b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c00 <neai_anomalydetection_init+0xd8>)
 8007b90:	7023      	strb	r3, [r4, #0]
 8007b92:	eeb0 0a48 	vmov.f32	s0, s16
 8007b96:	2101      	movs	r1, #1
 8007b98:	7011      	strb	r1, [r2, #0]
 8007b9a:	f7ff ffc3 	bl	8007b24 <_fminf>
 8007b9e:	eeb4 0a48 	vcmp.f32	s0, s16
 8007ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba6:	bf1c      	itt	ne
 8007ba8:	2081      	movne	r0, #129	@ 0x81
 8007baa:	7020      	strbne	r0, [r4, #0]
 8007bac:	ecbd 8b02 	vpop	{d8}
 8007bb0:	4b14      	ldr	r3, [pc, #80]	@ (8007c04 <neai_anomalydetection_init+0xdc>)
 8007bb2:	bf08      	it	eq
 8007bb4:	7820      	ldrbeq	r0, [r4, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	20000074 	.word	0x20000074
 8007bc0:	2000008c 	.word	0x2000008c
 8007bc4:	200000a4 	.word	0x200000a4
 8007bc8:	20000070 	.word	0x20000070
 8007bcc:	40066666 	.word	0x40066666
 8007bd0:	20000088 	.word	0x20000088
 8007bd4:	3f8ccccd 	.word	0x3f8ccccd
 8007bd8:	20000084 	.word	0x20000084
 8007bdc:	2000006c 	.word	0x2000006c
 8007be0:	40400000 	.word	0x40400000
 8007be4:	20000080 	.word	0x20000080
 8007be8:	20000b30 	.word	0x20000b30
 8007bec:	3f028f5c 	.word	0x3f028f5c
 8007bf0:	2000007c 	.word	0x2000007c
 8007bf4:	20000078 	.word	0x20000078
 8007bf8:	3f35c28f 	.word	0x3f35c28f
 8007bfc:	20000060 	.word	0x20000060
 8007c00:	20000068 	.word	0x20000068
 8007c04:	20000064 	.word	0x20000064

08007c08 <_vsniprintf_r>:
 8007c08:	b530      	push	{r4, r5, lr}
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	2c00      	cmp	r4, #0
 8007c0e:	b09b      	sub	sp, #108	@ 0x6c
 8007c10:	4605      	mov	r5, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	da05      	bge.n	8007c22 <_vsniprintf_r+0x1a>
 8007c16:	238b      	movs	r3, #139	@ 0x8b
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	b01b      	add	sp, #108	@ 0x6c
 8007c20:	bd30      	pop	{r4, r5, pc}
 8007c22:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c26:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c30:	bf14      	ite	ne
 8007c32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c36:	4623      	moveq	r3, r4
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	9305      	str	r3, [sp, #20]
 8007c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c40:	9100      	str	r1, [sp, #0]
 8007c42:	9104      	str	r1, [sp, #16]
 8007c44:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007c48:	4669      	mov	r1, sp
 8007c4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007c4c:	f000 f9a0 	bl	8007f90 <_svfiprintf_r>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	bfbc      	itt	lt
 8007c54:	238b      	movlt	r3, #139	@ 0x8b
 8007c56:	602b      	strlt	r3, [r5, #0]
 8007c58:	2c00      	cmp	r4, #0
 8007c5a:	d0e0      	beq.n	8007c1e <_vsniprintf_r+0x16>
 8007c5c:	9b00      	ldr	r3, [sp, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e7dc      	b.n	8007c1e <_vsniprintf_r+0x16>

08007c64 <vsniprintf>:
 8007c64:	b507      	push	{r0, r1, r2, lr}
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	460a      	mov	r2, r1
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	4803      	ldr	r0, [pc, #12]	@ (8007c7c <vsniprintf+0x18>)
 8007c70:	6800      	ldr	r0, [r0, #0]
 8007c72:	f7ff ffc9 	bl	8007c08 <_vsniprintf_r>
 8007c76:	b003      	add	sp, #12
 8007c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c7c:	20000010 	.word	0x20000010

08007c80 <memset>:
 8007c80:	4402      	add	r2, r0
 8007c82:	4603      	mov	r3, r0
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d100      	bne.n	8007c8a <memset+0xa>
 8007c88:	4770      	bx	lr
 8007c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8e:	e7f9      	b.n	8007c84 <memset+0x4>

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	@ (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000010 	.word	0x20000010

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	@ (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 fcec 	bl	800868c <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	08008780 	.word	0x08008780
 8007cd8:	08008780 	.word	0x08008780
 8007cdc:	08008780 	.word	0x08008780
 8007ce0:	08008784 	.word	0x08008784

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <_free_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4605      	mov	r5, r0
 8007cec:	2900      	cmp	r1, #0
 8007cee:	d041      	beq.n	8007d74 <_free_r+0x8c>
 8007cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf4:	1f0c      	subs	r4, r1, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bfb8      	it	lt
 8007cfa:	18e4      	addlt	r4, r4, r3
 8007cfc:	f000 f8e0 	bl	8007ec0 <__malloc_lock>
 8007d00:	4a1d      	ldr	r2, [pc, #116]	@ (8007d78 <_free_r+0x90>)
 8007d02:	6813      	ldr	r3, [r2, #0]
 8007d04:	b933      	cbnz	r3, 8007d14 <_free_r+0x2c>
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	6014      	str	r4, [r2, #0]
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d10:	f000 b8dc 	b.w	8007ecc <__malloc_unlock>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d908      	bls.n	8007d2a <_free_r+0x42>
 8007d18:	6820      	ldr	r0, [r4, #0]
 8007d1a:	1821      	adds	r1, r4, r0
 8007d1c:	428b      	cmp	r3, r1
 8007d1e:	bf01      	itttt	eq
 8007d20:	6819      	ldreq	r1, [r3, #0]
 8007d22:	685b      	ldreq	r3, [r3, #4]
 8007d24:	1809      	addeq	r1, r1, r0
 8007d26:	6021      	streq	r1, [r4, #0]
 8007d28:	e7ed      	b.n	8007d06 <_free_r+0x1e>
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	b10b      	cbz	r3, 8007d34 <_free_r+0x4c>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d9fa      	bls.n	8007d2a <_free_r+0x42>
 8007d34:	6811      	ldr	r1, [r2, #0]
 8007d36:	1850      	adds	r0, r2, r1
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d10b      	bne.n	8007d54 <_free_r+0x6c>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	4401      	add	r1, r0
 8007d40:	1850      	adds	r0, r2, r1
 8007d42:	4283      	cmp	r3, r0
 8007d44:	6011      	str	r1, [r2, #0]
 8007d46:	d1e0      	bne.n	8007d0a <_free_r+0x22>
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	6053      	str	r3, [r2, #4]
 8007d4e:	4408      	add	r0, r1
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	e7da      	b.n	8007d0a <_free_r+0x22>
 8007d54:	d902      	bls.n	8007d5c <_free_r+0x74>
 8007d56:	230c      	movs	r3, #12
 8007d58:	602b      	str	r3, [r5, #0]
 8007d5a:	e7d6      	b.n	8007d0a <_free_r+0x22>
 8007d5c:	6820      	ldr	r0, [r4, #0]
 8007d5e:	1821      	adds	r1, r4, r0
 8007d60:	428b      	cmp	r3, r1
 8007d62:	bf04      	itt	eq
 8007d64:	6819      	ldreq	r1, [r3, #0]
 8007d66:	685b      	ldreq	r3, [r3, #4]
 8007d68:	6063      	str	r3, [r4, #4]
 8007d6a:	bf04      	itt	eq
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	6054      	str	r4, [r2, #4]
 8007d72:	e7ca      	b.n	8007d0a <_free_r+0x22>
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	bf00      	nop
 8007d78:	20000c78 	.word	0x20000c78

08007d7c <sbrk_aligned>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8007dbc <sbrk_aligned+0x40>)
 8007d80:	460c      	mov	r4, r1
 8007d82:	6831      	ldr	r1, [r6, #0]
 8007d84:	4605      	mov	r5, r0
 8007d86:	b911      	cbnz	r1, 8007d8e <sbrk_aligned+0x12>
 8007d88:	f000 fba4 	bl	80084d4 <_sbrk_r>
 8007d8c:	6030      	str	r0, [r6, #0]
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 fb9f 	bl	80084d4 <_sbrk_r>
 8007d96:	1c43      	adds	r3, r0, #1
 8007d98:	d103      	bne.n	8007da2 <sbrk_aligned+0x26>
 8007d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d9e:	4620      	mov	r0, r4
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
 8007da2:	1cc4      	adds	r4, r0, #3
 8007da4:	f024 0403 	bic.w	r4, r4, #3
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d0f8      	beq.n	8007d9e <sbrk_aligned+0x22>
 8007dac:	1a21      	subs	r1, r4, r0
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 fb90 	bl	80084d4 <_sbrk_r>
 8007db4:	3001      	adds	r0, #1
 8007db6:	d1f2      	bne.n	8007d9e <sbrk_aligned+0x22>
 8007db8:	e7ef      	b.n	8007d9a <sbrk_aligned+0x1e>
 8007dba:	bf00      	nop
 8007dbc:	20000c74 	.word	0x20000c74

08007dc0 <_malloc_r>:
 8007dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc4:	1ccd      	adds	r5, r1, #3
 8007dc6:	f025 0503 	bic.w	r5, r5, #3
 8007dca:	3508      	adds	r5, #8
 8007dcc:	2d0c      	cmp	r5, #12
 8007dce:	bf38      	it	cc
 8007dd0:	250c      	movcc	r5, #12
 8007dd2:	2d00      	cmp	r5, #0
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	db01      	blt.n	8007ddc <_malloc_r+0x1c>
 8007dd8:	42a9      	cmp	r1, r5
 8007dda:	d904      	bls.n	8007de6 <_malloc_r+0x26>
 8007ddc:	230c      	movs	r3, #12
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	2000      	movs	r0, #0
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ebc <_malloc_r+0xfc>
 8007dea:	f000 f869 	bl	8007ec0 <__malloc_lock>
 8007dee:	f8d8 3000 	ldr.w	r3, [r8]
 8007df2:	461c      	mov	r4, r3
 8007df4:	bb44      	cbnz	r4, 8007e48 <_malloc_r+0x88>
 8007df6:	4629      	mov	r1, r5
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff ffbf 	bl	8007d7c <sbrk_aligned>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	4604      	mov	r4, r0
 8007e02:	d158      	bne.n	8007eb6 <_malloc_r+0xf6>
 8007e04:	f8d8 4000 	ldr.w	r4, [r8]
 8007e08:	4627      	mov	r7, r4
 8007e0a:	2f00      	cmp	r7, #0
 8007e0c:	d143      	bne.n	8007e96 <_malloc_r+0xd6>
 8007e0e:	2c00      	cmp	r4, #0
 8007e10:	d04b      	beq.n	8007eaa <_malloc_r+0xea>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	4639      	mov	r1, r7
 8007e16:	4630      	mov	r0, r6
 8007e18:	eb04 0903 	add.w	r9, r4, r3
 8007e1c:	f000 fb5a 	bl	80084d4 <_sbrk_r>
 8007e20:	4581      	cmp	r9, r0
 8007e22:	d142      	bne.n	8007eaa <_malloc_r+0xea>
 8007e24:	6821      	ldr	r1, [r4, #0]
 8007e26:	1a6d      	subs	r5, r5, r1
 8007e28:	4629      	mov	r1, r5
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ffa6 	bl	8007d7c <sbrk_aligned>
 8007e30:	3001      	adds	r0, #1
 8007e32:	d03a      	beq.n	8007eaa <_malloc_r+0xea>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	442b      	add	r3, r5
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	bb62      	cbnz	r2, 8007e9c <_malloc_r+0xdc>
 8007e42:	f8c8 7000 	str.w	r7, [r8]
 8007e46:	e00f      	b.n	8007e68 <_malloc_r+0xa8>
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	1b52      	subs	r2, r2, r5
 8007e4c:	d420      	bmi.n	8007e90 <_malloc_r+0xd0>
 8007e4e:	2a0b      	cmp	r2, #11
 8007e50:	d917      	bls.n	8007e82 <_malloc_r+0xc2>
 8007e52:	1961      	adds	r1, r4, r5
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	6025      	str	r5, [r4, #0]
 8007e58:	bf18      	it	ne
 8007e5a:	6059      	strne	r1, [r3, #4]
 8007e5c:	6863      	ldr	r3, [r4, #4]
 8007e5e:	bf08      	it	eq
 8007e60:	f8c8 1000 	streq.w	r1, [r8]
 8007e64:	5162      	str	r2, [r4, r5]
 8007e66:	604b      	str	r3, [r1, #4]
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f82f 	bl	8007ecc <__malloc_unlock>
 8007e6e:	f104 000b 	add.w	r0, r4, #11
 8007e72:	1d23      	adds	r3, r4, #4
 8007e74:	f020 0007 	bic.w	r0, r0, #7
 8007e78:	1ac2      	subs	r2, r0, r3
 8007e7a:	bf1c      	itt	ne
 8007e7c:	1a1b      	subne	r3, r3, r0
 8007e7e:	50a3      	strne	r3, [r4, r2]
 8007e80:	e7af      	b.n	8007de2 <_malloc_r+0x22>
 8007e82:	6862      	ldr	r2, [r4, #4]
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	bf0c      	ite	eq
 8007e88:	f8c8 2000 	streq.w	r2, [r8]
 8007e8c:	605a      	strne	r2, [r3, #4]
 8007e8e:	e7eb      	b.n	8007e68 <_malloc_r+0xa8>
 8007e90:	4623      	mov	r3, r4
 8007e92:	6864      	ldr	r4, [r4, #4]
 8007e94:	e7ae      	b.n	8007df4 <_malloc_r+0x34>
 8007e96:	463c      	mov	r4, r7
 8007e98:	687f      	ldr	r7, [r7, #4]
 8007e9a:	e7b6      	b.n	8007e0a <_malloc_r+0x4a>
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d1fb      	bne.n	8007e9c <_malloc_r+0xdc>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6053      	str	r3, [r2, #4]
 8007ea8:	e7de      	b.n	8007e68 <_malloc_r+0xa8>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f000 f80c 	bl	8007ecc <__malloc_unlock>
 8007eb4:	e794      	b.n	8007de0 <_malloc_r+0x20>
 8007eb6:	6005      	str	r5, [r0, #0]
 8007eb8:	e7d6      	b.n	8007e68 <_malloc_r+0xa8>
 8007eba:	bf00      	nop
 8007ebc:	20000c78 	.word	0x20000c78

08007ec0 <__malloc_lock>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	@ (8007ec8 <__malloc_lock+0x8>)
 8007ec2:	f7ff bf0f 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000c70 	.word	0x20000c70

08007ecc <__malloc_unlock>:
 8007ecc:	4801      	ldr	r0, [pc, #4]	@ (8007ed4 <__malloc_unlock+0x8>)
 8007ece:	f7ff bf0a 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007ed2:	bf00      	nop
 8007ed4:	20000c70 	.word	0x20000c70

08007ed8 <__ssputs_r>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	688e      	ldr	r6, [r1, #8]
 8007ede:	461f      	mov	r7, r3
 8007ee0:	42be      	cmp	r6, r7
 8007ee2:	680b      	ldr	r3, [r1, #0]
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4690      	mov	r8, r2
 8007eea:	d82d      	bhi.n	8007f48 <__ssputs_r+0x70>
 8007eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ef0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ef4:	d026      	beq.n	8007f44 <__ssputs_r+0x6c>
 8007ef6:	6965      	ldr	r5, [r4, #20]
 8007ef8:	6909      	ldr	r1, [r1, #16]
 8007efa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007efe:	eba3 0901 	sub.w	r9, r3, r1
 8007f02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f06:	1c7b      	adds	r3, r7, #1
 8007f08:	444b      	add	r3, r9
 8007f0a:	106d      	asrs	r5, r5, #1
 8007f0c:	429d      	cmp	r5, r3
 8007f0e:	bf38      	it	cc
 8007f10:	461d      	movcc	r5, r3
 8007f12:	0553      	lsls	r3, r2, #21
 8007f14:	d527      	bpl.n	8007f66 <__ssputs_r+0x8e>
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7ff ff52 	bl	8007dc0 <_malloc_r>
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	b360      	cbz	r0, 8007f7a <__ssputs_r+0xa2>
 8007f20:	6921      	ldr	r1, [r4, #16]
 8007f22:	464a      	mov	r2, r9
 8007f24:	f000 fae6 	bl	80084f4 <memcpy>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f32:	81a3      	strh	r3, [r4, #12]
 8007f34:	6126      	str	r6, [r4, #16]
 8007f36:	6165      	str	r5, [r4, #20]
 8007f38:	444e      	add	r6, r9
 8007f3a:	eba5 0509 	sub.w	r5, r5, r9
 8007f3e:	6026      	str	r6, [r4, #0]
 8007f40:	60a5      	str	r5, [r4, #8]
 8007f42:	463e      	mov	r6, r7
 8007f44:	42be      	cmp	r6, r7
 8007f46:	d900      	bls.n	8007f4a <__ssputs_r+0x72>
 8007f48:	463e      	mov	r6, r7
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	4632      	mov	r2, r6
 8007f4e:	4641      	mov	r1, r8
 8007f50:	f000 faa6 	bl	80084a0 <memmove>
 8007f54:	68a3      	ldr	r3, [r4, #8]
 8007f56:	1b9b      	subs	r3, r3, r6
 8007f58:	60a3      	str	r3, [r4, #8]
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	4433      	add	r3, r6
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	2000      	movs	r0, #0
 8007f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f66:	462a      	mov	r2, r5
 8007f68:	f000 fad2 	bl	8008510 <_realloc_r>
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d1e0      	bne.n	8007f34 <__ssputs_r+0x5c>
 8007f72:	6921      	ldr	r1, [r4, #16]
 8007f74:	4650      	mov	r0, sl
 8007f76:	f7ff feb7 	bl	8007ce8 <_free_r>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	f8ca 3000 	str.w	r3, [sl]
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f86:	81a3      	strh	r3, [r4, #12]
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	e7e9      	b.n	8007f62 <__ssputs_r+0x8a>
	...

08007f90 <_svfiprintf_r>:
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	4698      	mov	r8, r3
 8007f96:	898b      	ldrh	r3, [r1, #12]
 8007f98:	061b      	lsls	r3, r3, #24
 8007f9a:	b09d      	sub	sp, #116	@ 0x74
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	d510      	bpl.n	8007fc6 <_svfiprintf_r+0x36>
 8007fa4:	690b      	ldr	r3, [r1, #16]
 8007fa6:	b973      	cbnz	r3, 8007fc6 <_svfiprintf_r+0x36>
 8007fa8:	2140      	movs	r1, #64	@ 0x40
 8007faa:	f7ff ff09 	bl	8007dc0 <_malloc_r>
 8007fae:	6028      	str	r0, [r5, #0]
 8007fb0:	6128      	str	r0, [r5, #16]
 8007fb2:	b930      	cbnz	r0, 8007fc2 <_svfiprintf_r+0x32>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbc:	b01d      	add	sp, #116	@ 0x74
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc2:	2340      	movs	r3, #64	@ 0x40
 8007fc4:	616b      	str	r3, [r5, #20]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fca:	2320      	movs	r3, #32
 8007fcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd4:	2330      	movs	r3, #48	@ 0x30
 8007fd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008174 <_svfiprintf_r+0x1e4>
 8007fda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fde:	f04f 0901 	mov.w	r9, #1
 8007fe2:	4623      	mov	r3, r4
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fea:	b10a      	cbz	r2, 8007ff0 <_svfiprintf_r+0x60>
 8007fec:	2a25      	cmp	r2, #37	@ 0x25
 8007fee:	d1f9      	bne.n	8007fe4 <_svfiprintf_r+0x54>
 8007ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ff4:	d00b      	beq.n	800800e <_svfiprintf_r+0x7e>
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4638      	mov	r0, r7
 8007ffe:	f7ff ff6b 	bl	8007ed8 <__ssputs_r>
 8008002:	3001      	adds	r0, #1
 8008004:	f000 80a7 	beq.w	8008156 <_svfiprintf_r+0x1c6>
 8008008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800800a:	445a      	add	r2, fp
 800800c:	9209      	str	r2, [sp, #36]	@ 0x24
 800800e:	f89a 3000 	ldrb.w	r3, [sl]
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 809f 	beq.w	8008156 <_svfiprintf_r+0x1c6>
 8008018:	2300      	movs	r3, #0
 800801a:	f04f 32ff 	mov.w	r2, #4294967295
 800801e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008022:	f10a 0a01 	add.w	sl, sl, #1
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800802e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008030:	4654      	mov	r4, sl
 8008032:	2205      	movs	r2, #5
 8008034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008038:	484e      	ldr	r0, [pc, #312]	@ (8008174 <_svfiprintf_r+0x1e4>)
 800803a:	f7f8 f8d1 	bl	80001e0 <memchr>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	b9d8      	cbnz	r0, 800807a <_svfiprintf_r+0xea>
 8008042:	06d0      	lsls	r0, r2, #27
 8008044:	bf44      	itt	mi
 8008046:	2320      	movmi	r3, #32
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800804c:	0711      	lsls	r1, r2, #28
 800804e:	bf44      	itt	mi
 8008050:	232b      	movmi	r3, #43	@ 0x2b
 8008052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008056:	f89a 3000 	ldrb.w	r3, [sl]
 800805a:	2b2a      	cmp	r3, #42	@ 0x2a
 800805c:	d015      	beq.n	800808a <_svfiprintf_r+0xfa>
 800805e:	9a07      	ldr	r2, [sp, #28]
 8008060:	4654      	mov	r4, sl
 8008062:	2000      	movs	r0, #0
 8008064:	f04f 0c0a 	mov.w	ip, #10
 8008068:	4621      	mov	r1, r4
 800806a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800806e:	3b30      	subs	r3, #48	@ 0x30
 8008070:	2b09      	cmp	r3, #9
 8008072:	d94b      	bls.n	800810c <_svfiprintf_r+0x17c>
 8008074:	b1b0      	cbz	r0, 80080a4 <_svfiprintf_r+0x114>
 8008076:	9207      	str	r2, [sp, #28]
 8008078:	e014      	b.n	80080a4 <_svfiprintf_r+0x114>
 800807a:	eba0 0308 	sub.w	r3, r0, r8
 800807e:	fa09 f303 	lsl.w	r3, r9, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	46a2      	mov	sl, r4
 8008088:	e7d2      	b.n	8008030 <_svfiprintf_r+0xa0>
 800808a:	9b03      	ldr	r3, [sp, #12]
 800808c:	1d19      	adds	r1, r3, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	9103      	str	r1, [sp, #12]
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfbb      	ittet	lt
 8008096:	425b      	neglt	r3, r3
 8008098:	f042 0202 	orrlt.w	r2, r2, #2
 800809c:	9307      	strge	r3, [sp, #28]
 800809e:	9307      	strlt	r3, [sp, #28]
 80080a0:	bfb8      	it	lt
 80080a2:	9204      	strlt	r2, [sp, #16]
 80080a4:	7823      	ldrb	r3, [r4, #0]
 80080a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80080a8:	d10a      	bne.n	80080c0 <_svfiprintf_r+0x130>
 80080aa:	7863      	ldrb	r3, [r4, #1]
 80080ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ae:	d132      	bne.n	8008116 <_svfiprintf_r+0x186>
 80080b0:	9b03      	ldr	r3, [sp, #12]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9203      	str	r2, [sp, #12]
 80080b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080bc:	3402      	adds	r4, #2
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008184 <_svfiprintf_r+0x1f4>
 80080c4:	7821      	ldrb	r1, [r4, #0]
 80080c6:	2203      	movs	r2, #3
 80080c8:	4650      	mov	r0, sl
 80080ca:	f7f8 f889 	bl	80001e0 <memchr>
 80080ce:	b138      	cbz	r0, 80080e0 <_svfiprintf_r+0x150>
 80080d0:	9b04      	ldr	r3, [sp, #16]
 80080d2:	eba0 000a 	sub.w	r0, r0, sl
 80080d6:	2240      	movs	r2, #64	@ 0x40
 80080d8:	4082      	lsls	r2, r0
 80080da:	4313      	orrs	r3, r2
 80080dc:	3401      	adds	r4, #1
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e4:	4824      	ldr	r0, [pc, #144]	@ (8008178 <_svfiprintf_r+0x1e8>)
 80080e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ea:	2206      	movs	r2, #6
 80080ec:	f7f8 f878 	bl	80001e0 <memchr>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d036      	beq.n	8008162 <_svfiprintf_r+0x1d2>
 80080f4:	4b21      	ldr	r3, [pc, #132]	@ (800817c <_svfiprintf_r+0x1ec>)
 80080f6:	bb1b      	cbnz	r3, 8008140 <_svfiprintf_r+0x1b0>
 80080f8:	9b03      	ldr	r3, [sp, #12]
 80080fa:	3307      	adds	r3, #7
 80080fc:	f023 0307 	bic.w	r3, r3, #7
 8008100:	3308      	adds	r3, #8
 8008102:	9303      	str	r3, [sp, #12]
 8008104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008106:	4433      	add	r3, r6
 8008108:	9309      	str	r3, [sp, #36]	@ 0x24
 800810a:	e76a      	b.n	8007fe2 <_svfiprintf_r+0x52>
 800810c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008110:	460c      	mov	r4, r1
 8008112:	2001      	movs	r0, #1
 8008114:	e7a8      	b.n	8008068 <_svfiprintf_r+0xd8>
 8008116:	2300      	movs	r3, #0
 8008118:	3401      	adds	r4, #1
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	4619      	mov	r1, r3
 800811e:	f04f 0c0a 	mov.w	ip, #10
 8008122:	4620      	mov	r0, r4
 8008124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008128:	3a30      	subs	r2, #48	@ 0x30
 800812a:	2a09      	cmp	r2, #9
 800812c:	d903      	bls.n	8008136 <_svfiprintf_r+0x1a6>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0c6      	beq.n	80080c0 <_svfiprintf_r+0x130>
 8008132:	9105      	str	r1, [sp, #20]
 8008134:	e7c4      	b.n	80080c0 <_svfiprintf_r+0x130>
 8008136:	fb0c 2101 	mla	r1, ip, r1, r2
 800813a:	4604      	mov	r4, r0
 800813c:	2301      	movs	r3, #1
 800813e:	e7f0      	b.n	8008122 <_svfiprintf_r+0x192>
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	462a      	mov	r2, r5
 8008146:	4b0e      	ldr	r3, [pc, #56]	@ (8008180 <_svfiprintf_r+0x1f0>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	4638      	mov	r0, r7
 800814c:	f3af 8000 	nop.w
 8008150:	1c42      	adds	r2, r0, #1
 8008152:	4606      	mov	r6, r0
 8008154:	d1d6      	bne.n	8008104 <_svfiprintf_r+0x174>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	065b      	lsls	r3, r3, #25
 800815a:	f53f af2d 	bmi.w	8007fb8 <_svfiprintf_r+0x28>
 800815e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008160:	e72c      	b.n	8007fbc <_svfiprintf_r+0x2c>
 8008162:	ab03      	add	r3, sp, #12
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	462a      	mov	r2, r5
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <_svfiprintf_r+0x1f0>)
 800816a:	a904      	add	r1, sp, #16
 800816c:	4638      	mov	r0, r7
 800816e:	f000 f879 	bl	8008264 <_printf_i>
 8008172:	e7ed      	b.n	8008150 <_svfiprintf_r+0x1c0>
 8008174:	08008744 	.word	0x08008744
 8008178:	0800874e 	.word	0x0800874e
 800817c:	00000000 	.word	0x00000000
 8008180:	08007ed9 	.word	0x08007ed9
 8008184:	0800874a 	.word	0x0800874a

08008188 <_printf_common>:
 8008188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800818c:	4616      	mov	r6, r2
 800818e:	4698      	mov	r8, r3
 8008190:	688a      	ldr	r2, [r1, #8]
 8008192:	690b      	ldr	r3, [r1, #16]
 8008194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008198:	4293      	cmp	r3, r2
 800819a:	bfb8      	it	lt
 800819c:	4613      	movlt	r3, r2
 800819e:	6033      	str	r3, [r6, #0]
 80081a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081a4:	4607      	mov	r7, r0
 80081a6:	460c      	mov	r4, r1
 80081a8:	b10a      	cbz	r2, 80081ae <_printf_common+0x26>
 80081aa:	3301      	adds	r3, #1
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	0699      	lsls	r1, r3, #26
 80081b2:	bf42      	ittt	mi
 80081b4:	6833      	ldrmi	r3, [r6, #0]
 80081b6:	3302      	addmi	r3, #2
 80081b8:	6033      	strmi	r3, [r6, #0]
 80081ba:	6825      	ldr	r5, [r4, #0]
 80081bc:	f015 0506 	ands.w	r5, r5, #6
 80081c0:	d106      	bne.n	80081d0 <_printf_common+0x48>
 80081c2:	f104 0a19 	add.w	sl, r4, #25
 80081c6:	68e3      	ldr	r3, [r4, #12]
 80081c8:	6832      	ldr	r2, [r6, #0]
 80081ca:	1a9b      	subs	r3, r3, r2
 80081cc:	42ab      	cmp	r3, r5
 80081ce:	dc26      	bgt.n	800821e <_printf_common+0x96>
 80081d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081d4:	6822      	ldr	r2, [r4, #0]
 80081d6:	3b00      	subs	r3, #0
 80081d8:	bf18      	it	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	0692      	lsls	r2, r2, #26
 80081de:	d42b      	bmi.n	8008238 <_printf_common+0xb0>
 80081e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081e4:	4641      	mov	r1, r8
 80081e6:	4638      	mov	r0, r7
 80081e8:	47c8      	blx	r9
 80081ea:	3001      	adds	r0, #1
 80081ec:	d01e      	beq.n	800822c <_printf_common+0xa4>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	f003 0306 	and.w	r3, r3, #6
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	bf02      	ittt	eq
 80081fa:	68e5      	ldreq	r5, [r4, #12]
 80081fc:	6833      	ldreq	r3, [r6, #0]
 80081fe:	1aed      	subeq	r5, r5, r3
 8008200:	68a3      	ldr	r3, [r4, #8]
 8008202:	bf0c      	ite	eq
 8008204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008208:	2500      	movne	r5, #0
 800820a:	4293      	cmp	r3, r2
 800820c:	bfc4      	itt	gt
 800820e:	1a9b      	subgt	r3, r3, r2
 8008210:	18ed      	addgt	r5, r5, r3
 8008212:	2600      	movs	r6, #0
 8008214:	341a      	adds	r4, #26
 8008216:	42b5      	cmp	r5, r6
 8008218:	d11a      	bne.n	8008250 <_printf_common+0xc8>
 800821a:	2000      	movs	r0, #0
 800821c:	e008      	b.n	8008230 <_printf_common+0xa8>
 800821e:	2301      	movs	r3, #1
 8008220:	4652      	mov	r2, sl
 8008222:	4641      	mov	r1, r8
 8008224:	4638      	mov	r0, r7
 8008226:	47c8      	blx	r9
 8008228:	3001      	adds	r0, #1
 800822a:	d103      	bne.n	8008234 <_printf_common+0xac>
 800822c:	f04f 30ff 	mov.w	r0, #4294967295
 8008230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008234:	3501      	adds	r5, #1
 8008236:	e7c6      	b.n	80081c6 <_printf_common+0x3e>
 8008238:	18e1      	adds	r1, r4, r3
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	2030      	movs	r0, #48	@ 0x30
 800823e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008242:	4422      	add	r2, r4
 8008244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800824c:	3302      	adds	r3, #2
 800824e:	e7c7      	b.n	80081e0 <_printf_common+0x58>
 8008250:	2301      	movs	r3, #1
 8008252:	4622      	mov	r2, r4
 8008254:	4641      	mov	r1, r8
 8008256:	4638      	mov	r0, r7
 8008258:	47c8      	blx	r9
 800825a:	3001      	adds	r0, #1
 800825c:	d0e6      	beq.n	800822c <_printf_common+0xa4>
 800825e:	3601      	adds	r6, #1
 8008260:	e7d9      	b.n	8008216 <_printf_common+0x8e>
	...

08008264 <_printf_i>:
 8008264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	7e0f      	ldrb	r7, [r1, #24]
 800826a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800826c:	2f78      	cmp	r7, #120	@ 0x78
 800826e:	4691      	mov	r9, r2
 8008270:	4680      	mov	r8, r0
 8008272:	460c      	mov	r4, r1
 8008274:	469a      	mov	sl, r3
 8008276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800827a:	d807      	bhi.n	800828c <_printf_i+0x28>
 800827c:	2f62      	cmp	r7, #98	@ 0x62
 800827e:	d80a      	bhi.n	8008296 <_printf_i+0x32>
 8008280:	2f00      	cmp	r7, #0
 8008282:	f000 80d1 	beq.w	8008428 <_printf_i+0x1c4>
 8008286:	2f58      	cmp	r7, #88	@ 0x58
 8008288:	f000 80b8 	beq.w	80083fc <_printf_i+0x198>
 800828c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008294:	e03a      	b.n	800830c <_printf_i+0xa8>
 8008296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800829a:	2b15      	cmp	r3, #21
 800829c:	d8f6      	bhi.n	800828c <_printf_i+0x28>
 800829e:	a101      	add	r1, pc, #4	@ (adr r1, 80082a4 <_printf_i+0x40>)
 80082a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	08008311 	.word	0x08008311
 80082ac:	0800828d 	.word	0x0800828d
 80082b0:	0800828d 	.word	0x0800828d
 80082b4:	0800828d 	.word	0x0800828d
 80082b8:	0800828d 	.word	0x0800828d
 80082bc:	08008311 	.word	0x08008311
 80082c0:	0800828d 	.word	0x0800828d
 80082c4:	0800828d 	.word	0x0800828d
 80082c8:	0800828d 	.word	0x0800828d
 80082cc:	0800828d 	.word	0x0800828d
 80082d0:	0800840f 	.word	0x0800840f
 80082d4:	0800833b 	.word	0x0800833b
 80082d8:	080083c9 	.word	0x080083c9
 80082dc:	0800828d 	.word	0x0800828d
 80082e0:	0800828d 	.word	0x0800828d
 80082e4:	08008431 	.word	0x08008431
 80082e8:	0800828d 	.word	0x0800828d
 80082ec:	0800833b 	.word	0x0800833b
 80082f0:	0800828d 	.word	0x0800828d
 80082f4:	0800828d 	.word	0x0800828d
 80082f8:	080083d1 	.word	0x080083d1
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6032      	str	r2, [r6, #0]
 8008304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800830c:	2301      	movs	r3, #1
 800830e:	e09c      	b.n	800844a <_printf_i+0x1e6>
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	6820      	ldr	r0, [r4, #0]
 8008314:	1d19      	adds	r1, r3, #4
 8008316:	6031      	str	r1, [r6, #0]
 8008318:	0606      	lsls	r6, r0, #24
 800831a:	d501      	bpl.n	8008320 <_printf_i+0xbc>
 800831c:	681d      	ldr	r5, [r3, #0]
 800831e:	e003      	b.n	8008328 <_printf_i+0xc4>
 8008320:	0645      	lsls	r5, r0, #25
 8008322:	d5fb      	bpl.n	800831c <_printf_i+0xb8>
 8008324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008328:	2d00      	cmp	r5, #0
 800832a:	da03      	bge.n	8008334 <_printf_i+0xd0>
 800832c:	232d      	movs	r3, #45	@ 0x2d
 800832e:	426d      	negs	r5, r5
 8008330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008334:	4858      	ldr	r0, [pc, #352]	@ (8008498 <_printf_i+0x234>)
 8008336:	230a      	movs	r3, #10
 8008338:	e011      	b.n	800835e <_printf_i+0xfa>
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	0608      	lsls	r0, r1, #24
 8008340:	f853 5b04 	ldr.w	r5, [r3], #4
 8008344:	d402      	bmi.n	800834c <_printf_i+0xe8>
 8008346:	0649      	lsls	r1, r1, #25
 8008348:	bf48      	it	mi
 800834a:	b2ad      	uxthmi	r5, r5
 800834c:	2f6f      	cmp	r7, #111	@ 0x6f
 800834e:	4852      	ldr	r0, [pc, #328]	@ (8008498 <_printf_i+0x234>)
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	bf14      	ite	ne
 8008354:	230a      	movne	r3, #10
 8008356:	2308      	moveq	r3, #8
 8008358:	2100      	movs	r1, #0
 800835a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800835e:	6866      	ldr	r6, [r4, #4]
 8008360:	60a6      	str	r6, [r4, #8]
 8008362:	2e00      	cmp	r6, #0
 8008364:	db05      	blt.n	8008372 <_printf_i+0x10e>
 8008366:	6821      	ldr	r1, [r4, #0]
 8008368:	432e      	orrs	r6, r5
 800836a:	f021 0104 	bic.w	r1, r1, #4
 800836e:	6021      	str	r1, [r4, #0]
 8008370:	d04b      	beq.n	800840a <_printf_i+0x1a6>
 8008372:	4616      	mov	r6, r2
 8008374:	fbb5 f1f3 	udiv	r1, r5, r3
 8008378:	fb03 5711 	mls	r7, r3, r1, r5
 800837c:	5dc7      	ldrb	r7, [r0, r7]
 800837e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008382:	462f      	mov	r7, r5
 8008384:	42bb      	cmp	r3, r7
 8008386:	460d      	mov	r5, r1
 8008388:	d9f4      	bls.n	8008374 <_printf_i+0x110>
 800838a:	2b08      	cmp	r3, #8
 800838c:	d10b      	bne.n	80083a6 <_printf_i+0x142>
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	07df      	lsls	r7, r3, #31
 8008392:	d508      	bpl.n	80083a6 <_printf_i+0x142>
 8008394:	6923      	ldr	r3, [r4, #16]
 8008396:	6861      	ldr	r1, [r4, #4]
 8008398:	4299      	cmp	r1, r3
 800839a:	bfde      	ittt	le
 800839c:	2330      	movle	r3, #48	@ 0x30
 800839e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083a6:	1b92      	subs	r2, r2, r6
 80083a8:	6122      	str	r2, [r4, #16]
 80083aa:	f8cd a000 	str.w	sl, [sp]
 80083ae:	464b      	mov	r3, r9
 80083b0:	aa03      	add	r2, sp, #12
 80083b2:	4621      	mov	r1, r4
 80083b4:	4640      	mov	r0, r8
 80083b6:	f7ff fee7 	bl	8008188 <_printf_common>
 80083ba:	3001      	adds	r0, #1
 80083bc:	d14a      	bne.n	8008454 <_printf_i+0x1f0>
 80083be:	f04f 30ff 	mov.w	r0, #4294967295
 80083c2:	b004      	add	sp, #16
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	f043 0320 	orr.w	r3, r3, #32
 80083ce:	6023      	str	r3, [r4, #0]
 80083d0:	4832      	ldr	r0, [pc, #200]	@ (800849c <_printf_i+0x238>)
 80083d2:	2778      	movs	r7, #120	@ 0x78
 80083d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	6831      	ldr	r1, [r6, #0]
 80083dc:	061f      	lsls	r7, r3, #24
 80083de:	f851 5b04 	ldr.w	r5, [r1], #4
 80083e2:	d402      	bmi.n	80083ea <_printf_i+0x186>
 80083e4:	065f      	lsls	r7, r3, #25
 80083e6:	bf48      	it	mi
 80083e8:	b2ad      	uxthmi	r5, r5
 80083ea:	6031      	str	r1, [r6, #0]
 80083ec:	07d9      	lsls	r1, r3, #31
 80083ee:	bf44      	itt	mi
 80083f0:	f043 0320 	orrmi.w	r3, r3, #32
 80083f4:	6023      	strmi	r3, [r4, #0]
 80083f6:	b11d      	cbz	r5, 8008400 <_printf_i+0x19c>
 80083f8:	2310      	movs	r3, #16
 80083fa:	e7ad      	b.n	8008358 <_printf_i+0xf4>
 80083fc:	4826      	ldr	r0, [pc, #152]	@ (8008498 <_printf_i+0x234>)
 80083fe:	e7e9      	b.n	80083d4 <_printf_i+0x170>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	f023 0320 	bic.w	r3, r3, #32
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	e7f6      	b.n	80083f8 <_printf_i+0x194>
 800840a:	4616      	mov	r6, r2
 800840c:	e7bd      	b.n	800838a <_printf_i+0x126>
 800840e:	6833      	ldr	r3, [r6, #0]
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	6961      	ldr	r1, [r4, #20]
 8008414:	1d18      	adds	r0, r3, #4
 8008416:	6030      	str	r0, [r6, #0]
 8008418:	062e      	lsls	r6, r5, #24
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	d501      	bpl.n	8008422 <_printf_i+0x1be>
 800841e:	6019      	str	r1, [r3, #0]
 8008420:	e002      	b.n	8008428 <_printf_i+0x1c4>
 8008422:	0668      	lsls	r0, r5, #25
 8008424:	d5fb      	bpl.n	800841e <_printf_i+0x1ba>
 8008426:	8019      	strh	r1, [r3, #0]
 8008428:	2300      	movs	r3, #0
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	4616      	mov	r6, r2
 800842e:	e7bc      	b.n	80083aa <_printf_i+0x146>
 8008430:	6833      	ldr	r3, [r6, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	6032      	str	r2, [r6, #0]
 8008436:	681e      	ldr	r6, [r3, #0]
 8008438:	6862      	ldr	r2, [r4, #4]
 800843a:	2100      	movs	r1, #0
 800843c:	4630      	mov	r0, r6
 800843e:	f7f7 fecf 	bl	80001e0 <memchr>
 8008442:	b108      	cbz	r0, 8008448 <_printf_i+0x1e4>
 8008444:	1b80      	subs	r0, r0, r6
 8008446:	6060      	str	r0, [r4, #4]
 8008448:	6863      	ldr	r3, [r4, #4]
 800844a:	6123      	str	r3, [r4, #16]
 800844c:	2300      	movs	r3, #0
 800844e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008452:	e7aa      	b.n	80083aa <_printf_i+0x146>
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	4632      	mov	r2, r6
 8008458:	4649      	mov	r1, r9
 800845a:	4640      	mov	r0, r8
 800845c:	47d0      	blx	sl
 800845e:	3001      	adds	r0, #1
 8008460:	d0ad      	beq.n	80083be <_printf_i+0x15a>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	079b      	lsls	r3, r3, #30
 8008466:	d413      	bmi.n	8008490 <_printf_i+0x22c>
 8008468:	68e0      	ldr	r0, [r4, #12]
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	4298      	cmp	r0, r3
 800846e:	bfb8      	it	lt
 8008470:	4618      	movlt	r0, r3
 8008472:	e7a6      	b.n	80083c2 <_printf_i+0x15e>
 8008474:	2301      	movs	r3, #1
 8008476:	4632      	mov	r2, r6
 8008478:	4649      	mov	r1, r9
 800847a:	4640      	mov	r0, r8
 800847c:	47d0      	blx	sl
 800847e:	3001      	adds	r0, #1
 8008480:	d09d      	beq.n	80083be <_printf_i+0x15a>
 8008482:	3501      	adds	r5, #1
 8008484:	68e3      	ldr	r3, [r4, #12]
 8008486:	9903      	ldr	r1, [sp, #12]
 8008488:	1a5b      	subs	r3, r3, r1
 800848a:	42ab      	cmp	r3, r5
 800848c:	dcf2      	bgt.n	8008474 <_printf_i+0x210>
 800848e:	e7eb      	b.n	8008468 <_printf_i+0x204>
 8008490:	2500      	movs	r5, #0
 8008492:	f104 0619 	add.w	r6, r4, #25
 8008496:	e7f5      	b.n	8008484 <_printf_i+0x220>
 8008498:	08008755 	.word	0x08008755
 800849c:	08008766 	.word	0x08008766

080084a0 <memmove>:
 80084a0:	4288      	cmp	r0, r1
 80084a2:	b510      	push	{r4, lr}
 80084a4:	eb01 0402 	add.w	r4, r1, r2
 80084a8:	d902      	bls.n	80084b0 <memmove+0x10>
 80084aa:	4284      	cmp	r4, r0
 80084ac:	4623      	mov	r3, r4
 80084ae:	d807      	bhi.n	80084c0 <memmove+0x20>
 80084b0:	1e43      	subs	r3, r0, #1
 80084b2:	42a1      	cmp	r1, r4
 80084b4:	d008      	beq.n	80084c8 <memmove+0x28>
 80084b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084be:	e7f8      	b.n	80084b2 <memmove+0x12>
 80084c0:	4402      	add	r2, r0
 80084c2:	4601      	mov	r1, r0
 80084c4:	428a      	cmp	r2, r1
 80084c6:	d100      	bne.n	80084ca <memmove+0x2a>
 80084c8:	bd10      	pop	{r4, pc}
 80084ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084d2:	e7f7      	b.n	80084c4 <memmove+0x24>

080084d4 <_sbrk_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4d06      	ldr	r5, [pc, #24]	@ (80084f0 <_sbrk_r+0x1c>)
 80084d8:	2300      	movs	r3, #0
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f8 fdbe 	bl	8001060 <_sbrk>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_sbrk_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_sbrk_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20000c6c 	.word	0x20000c6c

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <_realloc_r>:
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	4607      	mov	r7, r0
 8008516:	4614      	mov	r4, r2
 8008518:	460d      	mov	r5, r1
 800851a:	b921      	cbnz	r1, 8008526 <_realloc_r+0x16>
 800851c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008520:	4611      	mov	r1, r2
 8008522:	f7ff bc4d 	b.w	8007dc0 <_malloc_r>
 8008526:	b92a      	cbnz	r2, 8008534 <_realloc_r+0x24>
 8008528:	f7ff fbde 	bl	8007ce8 <_free_r>
 800852c:	4625      	mov	r5, r4
 800852e:	4628      	mov	r0, r5
 8008530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008534:	f000 f81a 	bl	800856c <_malloc_usable_size_r>
 8008538:	4284      	cmp	r4, r0
 800853a:	4606      	mov	r6, r0
 800853c:	d802      	bhi.n	8008544 <_realloc_r+0x34>
 800853e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008542:	d8f4      	bhi.n	800852e <_realloc_r+0x1e>
 8008544:	4621      	mov	r1, r4
 8008546:	4638      	mov	r0, r7
 8008548:	f7ff fc3a 	bl	8007dc0 <_malloc_r>
 800854c:	4680      	mov	r8, r0
 800854e:	b908      	cbnz	r0, 8008554 <_realloc_r+0x44>
 8008550:	4645      	mov	r5, r8
 8008552:	e7ec      	b.n	800852e <_realloc_r+0x1e>
 8008554:	42b4      	cmp	r4, r6
 8008556:	4622      	mov	r2, r4
 8008558:	4629      	mov	r1, r5
 800855a:	bf28      	it	cs
 800855c:	4632      	movcs	r2, r6
 800855e:	f7ff ffc9 	bl	80084f4 <memcpy>
 8008562:	4629      	mov	r1, r5
 8008564:	4638      	mov	r0, r7
 8008566:	f7ff fbbf 	bl	8007ce8 <_free_r>
 800856a:	e7f1      	b.n	8008550 <_realloc_r+0x40>

0800856c <_malloc_usable_size_r>:
 800856c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008570:	1f18      	subs	r0, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	bfbc      	itt	lt
 8008576:	580b      	ldrlt	r3, [r1, r0]
 8008578:	18c0      	addlt	r0, r0, r3
 800857a:	4770      	bx	lr

0800857c <fmax>:
 800857c:	b508      	push	{r3, lr}
 800857e:	ed2d 8b04 	vpush	{d8-d9}
 8008582:	eeb0 8a40 	vmov.f32	s16, s0
 8008586:	eef0 8a60 	vmov.f32	s17, s1
 800858a:	eeb0 9a41 	vmov.f32	s18, s2
 800858e:	eef0 9a61 	vmov.f32	s19, s3
 8008592:	f000 f81d 	bl	80085d0 <__fpclassifyd>
 8008596:	b950      	cbnz	r0, 80085ae <fmax+0x32>
 8008598:	eeb0 8a49 	vmov.f32	s16, s18
 800859c:	eef0 8a69 	vmov.f32	s17, s19
 80085a0:	eeb0 0a48 	vmov.f32	s0, s16
 80085a4:	eef0 0a68 	vmov.f32	s1, s17
 80085a8:	ecbd 8b04 	vpop	{d8-d9}
 80085ac:	bd08      	pop	{r3, pc}
 80085ae:	eeb0 0a49 	vmov.f32	s0, s18
 80085b2:	eef0 0a69 	vmov.f32	s1, s19
 80085b6:	f000 f80b 	bl	80085d0 <__fpclassifyd>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d0f0      	beq.n	80085a0 <fmax+0x24>
 80085be:	ec53 2b19 	vmov	r2, r3, d9
 80085c2:	ec51 0b18 	vmov	r0, r1, d8
 80085c6:	f7f8 f895 	bl	80006f4 <__aeabi_dcmpgt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d0e4      	beq.n	8008598 <fmax+0x1c>
 80085ce:	e7e7      	b.n	80085a0 <fmax+0x24>

080085d0 <__fpclassifyd>:
 80085d0:	ec51 0b10 	vmov	r0, r1, d0
 80085d4:	460b      	mov	r3, r1
 80085d6:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 80085da:	b510      	push	{r4, lr}
 80085dc:	d104      	bne.n	80085e8 <__fpclassifyd+0x18>
 80085de:	2800      	cmp	r0, #0
 80085e0:	bf0c      	ite	eq
 80085e2:	2002      	moveq	r0, #2
 80085e4:	2003      	movne	r0, #3
 80085e6:	bd10      	pop	{r4, pc}
 80085e8:	4a09      	ldr	r2, [pc, #36]	@ (8008610 <__fpclassifyd+0x40>)
 80085ea:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 80085ee:	4294      	cmp	r4, r2
 80085f0:	d908      	bls.n	8008604 <__fpclassifyd+0x34>
 80085f2:	4a08      	ldr	r2, [pc, #32]	@ (8008614 <__fpclassifyd+0x44>)
 80085f4:	4213      	tst	r3, r2
 80085f6:	d007      	beq.n	8008608 <__fpclassifyd+0x38>
 80085f8:	4291      	cmp	r1, r2
 80085fa:	d107      	bne.n	800860c <__fpclassifyd+0x3c>
 80085fc:	fab0 f080 	clz	r0, r0
 8008600:	0940      	lsrs	r0, r0, #5
 8008602:	e7f0      	b.n	80085e6 <__fpclassifyd+0x16>
 8008604:	2004      	movs	r0, #4
 8008606:	e7ee      	b.n	80085e6 <__fpclassifyd+0x16>
 8008608:	2003      	movs	r0, #3
 800860a:	e7ec      	b.n	80085e6 <__fpclassifyd+0x16>
 800860c:	2000      	movs	r0, #0
 800860e:	e7ea      	b.n	80085e6 <__fpclassifyd+0x16>
 8008610:	7fdfffff 	.word	0x7fdfffff
 8008614:	7ff00000 	.word	0x7ff00000

08008618 <fminf>:
 8008618:	b508      	push	{r3, lr}
 800861a:	ed2d 8b02 	vpush	{d8}
 800861e:	eeb0 8a40 	vmov.f32	s16, s0
 8008622:	eef0 8a60 	vmov.f32	s17, s1
 8008626:	f000 f815 	bl	8008654 <__fpclassifyf>
 800862a:	b930      	cbnz	r0, 800863a <fminf+0x22>
 800862c:	eeb0 8a68 	vmov.f32	s16, s17
 8008630:	eeb0 0a48 	vmov.f32	s0, s16
 8008634:	ecbd 8b02 	vpop	{d8}
 8008638:	bd08      	pop	{r3, pc}
 800863a:	eeb0 0a68 	vmov.f32	s0, s17
 800863e:	f000 f809 	bl	8008654 <__fpclassifyf>
 8008642:	2800      	cmp	r0, #0
 8008644:	d0f4      	beq.n	8008630 <fminf+0x18>
 8008646:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800864a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864e:	d5ed      	bpl.n	800862c <fminf+0x14>
 8008650:	e7ee      	b.n	8008630 <fminf+0x18>
	...

08008654 <__fpclassifyf>:
 8008654:	ee10 3a10 	vmov	r3, s0
 8008658:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800865c:	d00d      	beq.n	800867a <__fpclassifyf+0x26>
 800865e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008662:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008666:	d30a      	bcc.n	800867e <__fpclassifyf+0x2a>
 8008668:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <__fpclassifyf+0x34>)
 800866a:	1e42      	subs	r2, r0, #1
 800866c:	429a      	cmp	r2, r3
 800866e:	d908      	bls.n	8008682 <__fpclassifyf+0x2e>
 8008670:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008674:	4258      	negs	r0, r3
 8008676:	4158      	adcs	r0, r3
 8008678:	4770      	bx	lr
 800867a:	2002      	movs	r0, #2
 800867c:	4770      	bx	lr
 800867e:	2004      	movs	r0, #4
 8008680:	4770      	bx	lr
 8008682:	2003      	movs	r0, #3
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	007ffffe 	.word	0x007ffffe

0800868c <_init>:
 800868c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868e:	bf00      	nop
 8008690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008692:	bc08      	pop	{r3}
 8008694:	469e      	mov	lr, r3
 8008696:	4770      	bx	lr

08008698 <_fini>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	bf00      	nop
 800869c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869e:	bc08      	pop	{r3}
 80086a0:	469e      	mov	lr, r3
 80086a2:	4770      	bx	lr
